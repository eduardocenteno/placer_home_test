{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "1P_v-P566Y0q",
        "n4PRKyFGnper",
        "xcVFv2vaxLmx",
        "FBRyFzyjw3nm",
        "7UyLjQYc0ju9",
        "wwov2ExujDQB",
        "LpdXA6CtXpud",
        "NBJZtPVFXyE5",
        "cJZ0vkzUhmly",
        "bk6hA5uiX-Gq"
      ],
      "authorship_tag": "ABX9TyPk6Tav/DQiIsYlfOj5gvsM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eduardocenteno/placer_home_test/blob/main/Placer.ai%20Test%20-%20Eduardo%20Centeno\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## **Introduction**:\n",
        "In the following, our objective is to investigate the underperformance of a specific Planet Fitness location at '10790 Alpharetta Hwy, Roswell.' The provided dataset contains the following columns, each offering unique insights into customer visits and associated attributes:\n",
        "\n",
        "1. **device_id**: A unique identifier for each device associated with a visit, enabling individual visitor tracking and behavior analysis.\n",
        "2. **visit_id**: Unique identifiers assigned to each visit, facilitating the distinction and analysis of individual gym visits.\n",
        "3. **venue_id**: Unique identifier for the visited gym location, allowing us to focus on the underperforming venue of interest.\n",
        "4. **visit_start_time and visit_end_time**: Timestamps indicating the start and end times of each visit, enabling analysis of visit duration and timing patterns.\n",
        "5.**visit_lat and visit_long**: Latitude and longitude coordinates of the gym location visited, offering geospatial insights related to proximity and catchment areas.\n",
        "6. **visit_weight**: An extrapolated value estimating the number of visits to Planet Fitness within a specific time period, incorporating factors such as app type, coverage, and other relevant parameters.\n",
        "7. **customer_weight**: An extrapolated value estimating the number of unique customers associated with each device, providing insights into distinct individuals visiting the gym over the entire report period.\n",
        "8. **user_home_lat and user_home_long**: Latitude and longitude coordinates representing the device user's home location, enabling analysis of the proximity of customers' residences to the gym.\n",
        "9.**user_work_lat and user_work_long**: Latitude and longitude coordinates representing the device user's work location, facilitating analysis of the gym's convenience factor during work commutes or post-work exercise routines.\n",
        "\n",
        "\n",
        "By exploring and analyzing these columns, we will identify factors contributing to the underperformance of the specified Planet Fitness location."
      ],
      "metadata": {
        "id": "aGKXHcMUlz_m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Importing Required Libraries**\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "1P_v-P566Y0q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive \n",
        "drive.mount('/content/gdrive')"
      ],
      "metadata": {
        "id": "xoFJyZjOn8cv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d28dbcfa-48cd-44f9-9204-b04503b42e25"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import plotly.express as px\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.graph_objects as go\n",
        "import seaborn as sns\n",
        "\n",
        "\n",
        "from datetime import datetime\n",
        "import requests\n",
        "\n",
        "!pip install geopy \n",
        "from geopy.distance import geodesic\n",
        "\n",
        "from sklearn.neighbors import NearestNeighbors\n",
        "\n",
        "!pip install folium\n",
        "import folium\n",
        "\n",
        "from sklearn.model_selection import StratifiedShuffleSplit\n",
        "\n",
        "import os\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gekCf_XB1eye",
        "outputId": "903bc91b-02a1-42a0-8487-e11d270e5e5c"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: geopy in /usr/local/lib/python3.10/dist-packages (2.3.0)\n",
            "Requirement already satisfied: geographiclib<3,>=1.52 in /usr/local/lib/python3.10/dist-packages (from geopy) (2.0)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: folium in /usr/local/lib/python3.10/dist-packages (0.14.0)\n",
            "Requirement already satisfied: branca>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from folium) (0.6.0)\n",
            "Requirement already satisfied: jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from folium) (3.1.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from folium) (1.22.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from folium) (2.27.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2>=2.9->folium) (2.1.2)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (3.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Loading**"
      ],
      "metadata": {
        "id": "n4PRKyFGnper"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to load and clean data\n",
        "def load_and_clean_data(filepath):\n",
        "    df = pd.read_csv(filepath)\n",
        "    df.columns = df.columns.str.strip()  # Remove leading and trailing spaces from column names\n",
        "    return df\n",
        "\n",
        "\n",
        "# Read visits data for each venue\n",
        "visits_pf_10790 = load_and_clean_data('/content/gdrive/MyDrive/placer_hometask/visits_Planet_Fitness_10790_Alpharetta_Hwy_Roswell_GA_30076_Roswell_GA_United_States_2018-02-01_2019-02-01_(1).csv')\n",
        "visits_pf_13071 = load_and_clean_data('/content/gdrive/MyDrive/placer_hometask/visits_Planet_Fitness_13071_Highway_9_Milton_GA_United_States_2018-02-01_2019-02-01.csv')\n",
        "visits_pf_1570 = load_and_clean_data('/content/gdrive/MyDrive/placer_hometask/visits_Planet_Fitness_1570_Holcomb_Bridge_Road_Roswell_Georgia_United_States_2018-02-01_2019-02-01.csv')\n",
        "visits_pf_299 = load_and_clean_data('/content/gdrive/MyDrive/placer_hometask/visits_Planet_Fitness_299_Molly_Lane_Woodstock_GA_United_States_2018-02-01_2019-02-01.csv')\n",
        "visits_metadata = load_and_clean_data('/content/gdrive/MyDrive/placer_hometask/venues_info.csv')\n",
        "\n",
        "# Third Party Data\n",
        "\n",
        "# All US zip codes with their corresponding latitude and longitude coordinates: https://www.census.gov/geographies/reference-files/time-series/geo/gazetteer-files.html\n",
        "gazetteer_zip = pd.read_csv('/content/gdrive/MyDrive/placer_hometask/2022_Gaz_zcta_national.txt', delimiter='\\t')\n",
        "gazetteer_zip.columns = gazetteer_zip.columns.str.strip()\n",
        "\n",
        "# Median Income by GeoID: https://data.census.gov/cedsci/webpages?q=S1901\n",
        "median_income_S1901 = pd.read_csv('/content/gdrive/MyDrive/placer_hometask/ACSST5Y2021.S1901-Data.csv')\n",
        "\n",
        "# Population by GeoID: https://data.census.gov/table?q=Age+and+Sex&tid=ACSST1Y2021.S0101\n",
        "sex_age_S0101 = pd.read_csv('/content/gdrive/MyDrive/placer_hometask/ACSST5Y2021.S0101-Data.csv')"
      ],
      "metadata": {
        "id": "Pyo-ccBwlzt5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95247309-d40c-45fd-9530-f8b9913bca49"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-41c8581b3426>:22: DtypeWarning: Columns (2,3,4,5,66,67,68,69,130,131,132,133,194,195,196,197) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  median_income_S1901 = pd.read_csv('/content/gdrive/MyDrive/placer_hometask/ACSST5Y2021.S1901-Data.csv')\n",
            "<ipython-input-3-41c8581b3426>:25: DtypeWarning: Columns (2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  sex_age_S0101 = pd.read_csv('/content/gdrive/MyDrive/placer_hometask/ACSST5Y2021.S0101-Data.csv')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exploratory Data Analysis (EDA)**"
      ],
      "metadata": {
        "id": "xcVFv2vaxLmx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Structure of the data. \n",
        "# Head: Print of first few rows of the data.\n",
        "# Shape: Print the number of rows and columns in the data.\n",
        "\n",
        "print(\"Data from Planet Fitness 10790\")\n",
        "print(visits_pf_10790.head())\n",
        "print(\"Shape:\", visits_pf_10790.shape)\n",
        "\n",
        "print(\"\\nData from Planet Fitness 13071\")\n",
        "print(visits_pf_13071.head())\n",
        "print(\"Shape:\", visits_pf_13071.shape)\n",
        "\n",
        "print(\"\\nData from Planet Fitness 1570\")\n",
        "print(visits_pf_1570.head())\n",
        "print(\"Shape:\", visits_pf_1570.shape)\n",
        "\n",
        "print(\"\\nData from Planet Fitness 299\")\n",
        "print(visits_pf_299.head())\n",
        "print(\"Shape:\", visits_pf_299.shape)"
      ],
      "metadata": {
        "id": "yAxKhp-TxQ64",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "54a9b645-e1b8-41d3-9255-3008b14bb159"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data from Planet Fitness 10790\n",
            "                  device_id                  visit_id  \\\n",
            "0  594a32cf6cffe54257e0cd00  5a73432c3ac6de07416dc662   \n",
            "1  594a32cf6cffe54257e0cd00  5a74938d877eb20736fd2b4d   \n",
            "2  594a32cf6cffe54257e0cd00  5a788f7ac6d0690710963748   \n",
            "3  594a32cf6cffe54257e0cd00  5a79d9bd8233db078de2abd8   \n",
            "4  594a32cf6cffe54257e0cd00  5a7b2bcac80d6007efda45cc   \n",
            "\n",
            "                   venue_id     visit_start_time       visit_end_time  \\\n",
            "0  1e5fcd8d57a10111defbe772  2018-02-01 04:21:00  2018-02-01 06:40:00   \n",
            "1  1e5fcd8d57a10111defbe772  2018-02-02 04:21:00  2018-02-02 06:34:00   \n",
            "2  1e5fcd8d57a10111defbe772  2018-02-05 04:26:00  2018-02-05 06:20:00   \n",
            "3  1e5fcd8d57a10111defbe772  2018-02-06 04:24:00  2018-02-06 06:43:00   \n",
            "4  1e5fcd8d57a10111defbe772  2018-02-07 04:19:00  2018-02-07 06:10:00   \n",
            "\n",
            "   visit_lat  visit_long  visit_weight  customer_weight  user_home_lat  \\\n",
            "0  34.042449  -84.341747     35.509552              0.0      34.054306   \n",
            "1  34.042457  -84.341828     34.655801              0.0      34.054536   \n",
            "2  34.042660  -84.341847     34.229250              0.0      34.054606   \n",
            "3  34.042539  -84.341908     34.520717              0.0      34.052541   \n",
            "4  34.042475  -84.341786     34.339978              0.0      34.054650   \n",
            "\n",
            "   user_home_long  user_work_lat  user_work_long  \n",
            "0      -84.299271      33.918793      -84.210145  \n",
            "1      -84.299138      33.917433      -84.209132  \n",
            "2      -84.301157      33.918846      -84.210032  \n",
            "3      -84.300257      33.917876      -84.211142  \n",
            "4      -84.301371      33.918330      -84.210130  \n",
            "Shape: (4665, 13)\n",
            "\n",
            "Data from Planet Fitness 13071\n",
            "                  device_id                  visit_id  \\\n",
            "0  58627145a42aab574992ec63  5a73347cc4cc59042dc78487   \n",
            "1  58627145a42aab574992ec63  5a7485d373cc10044ef7a5b6   \n",
            "2  58627145a42aab574992ec63  5a787a790c9bc7047b91883d   \n",
            "3  58627145a42aab574992ec63  5a79cc0a9701d70a99804057   \n",
            "4  58627145a42aab574992ec63  5a7c6f28b5cee4045452ea6f   \n",
            "\n",
            "                   venue_id     visit_start_time       visit_end_time  \\\n",
            "0  555e64ad5d915b3f59588b21  2018-02-01 04:20:00  2018-02-01 06:56:00   \n",
            "1  555e64ad5d915b3f59588b21  2018-02-02 04:22:00  2018-02-02 06:50:00   \n",
            "2  555e64ad5d915b3f59588b21  2018-02-05 04:49:00  2018-02-05 06:57:00   \n",
            "3  555e64ad5d915b3f59588b21  2018-02-06 04:38:00  2018-02-06 07:05:00   \n",
            "4  555e64ad5d915b3f59588b21  2018-02-08 04:17:00  2018-02-08 07:01:00   \n",
            "\n",
            "   visit_lat  visit_long  visit_weight  customer_weight  user_home_lat  \\\n",
            "0  34.101379  -84.268715     67.111355              0.0      28.396799   \n",
            "1  34.101349  -84.268784     66.961341              0.0      28.395662   \n",
            "2  34.101334  -84.268646     68.573341              0.0      28.395556   \n",
            "3  34.101349  -84.268684     70.516905              0.0      28.396052   \n",
            "4  34.101326  -84.268677     72.134044              0.0      28.396659   \n",
            "\n",
            "   user_home_long  user_work_lat  user_work_long  \n",
            "0      -80.600539            NaN             NaN  \n",
            "1      -80.600366            NaN             NaN  \n",
            "2      -80.600215            NaN             NaN  \n",
            "3      -80.600565            NaN             NaN  \n",
            "4      -80.600367            NaN             NaN  \n",
            "Shape: (6990, 13)\n",
            "\n",
            "Data from Planet Fitness 1570\n",
            "                  device_id                  visit_id  \\\n",
            "0  586a21a56cffe508acabfa8d  5a7348f8af84460828a81e4d   \n",
            "1  586a21a56cffe508acabfa8d  5a78953fb8877708918de1fc   \n",
            "2  586a21a56cffe508acabfa8d  5a7dfa2e0f2a8c08ddfb0738   \n",
            "3  586a21a56cffe508acabfa8d  5a81c8ec7574dc07f6bd4b15   \n",
            "4  586a21a56cffe508acabfa8d  5a83ad45748415061eee3dcd   \n",
            "\n",
            "                   venue_id     visit_start_time       visit_end_time  \\\n",
            "0  8f48831da12590c62940887c  2018-02-01 05:54:00  2018-02-01 06:53:00   \n",
            "1  8f48831da12590c62940887c  2018-02-05 05:51:00  2018-02-05 07:00:00   \n",
            "2  8f48831da12590c62940887c  2018-02-09 05:41:00  2018-02-09 06:23:00   \n",
            "3  8f48831da12590c62940887c  2018-02-12 05:51:00  2018-02-12 06:49:00   \n",
            "4  8f48831da12590c62940887c  2018-02-13 05:35:00  2018-02-13 06:42:00   \n",
            "\n",
            "   visit_lat  visit_long  visit_weight  customer_weight  user_home_lat  \\\n",
            "0  34.018491  -84.311714     22.992191              0.0      34.135796   \n",
            "1  34.018672  -84.311921     22.434006              0.0      34.137249   \n",
            "2  34.018685  -84.312141     25.165987              0.0      34.136323   \n",
            "3  34.018700  -84.312027     29.062069              0.0      34.135079   \n",
            "4  34.018694  -84.311873     23.479297              0.0      34.135170   \n",
            "\n",
            "   user_home_long  user_work_lat  user_work_long  \n",
            "0      -84.176834      34.024627      -84.312886  \n",
            "1      -84.178982      34.024086      -84.310752  \n",
            "2      -84.178088      34.022926      -84.311750  \n",
            "3      -84.179223      34.023922      -84.311806  \n",
            "4      -84.178205      34.023188      -84.312698  \n",
            "Shape: (6313, 13)\n",
            "\n",
            "Data from Planet Fitness 299\n",
            "                  device_id                  visit_id  \\\n",
            "0  5a4f1659b96e1e05480c5992  5a733af7814bbc0cacd04aae   \n",
            "1  5a4f1659b96e1e05480c5992  5a80b120c7e81e06c9fc90b3   \n",
            "2  5a4f1659b96e1e05480c5992  5a83811fa42aab42f02e3900   \n",
            "3  5a4f1659b96e1e05480c5992  5a8965800f1da906af45f4fd   \n",
            "4  5a4f1659b96e1e05480c5992  5a8ce96cce48dc0b5986813f   \n",
            "\n",
            "                   venue_id visit_start_time visit_end_time  visit_lat  \\\n",
            "0  b11c324e9d8022ba2a8e6488      2/1/18 5:19    2/1/18 6:15  34.083916   \n",
            "1  b11c324e9d8022ba2a8e6488     2/11/18 8:35  2/11/18 10:16  34.083594   \n",
            "2  b11c324e9d8022ba2a8e6488     2/13/18 5:04   2/13/18 6:25  34.083654   \n",
            "3  b11c324e9d8022ba2a8e6488    2/17/18 17:32  2/17/18 18:45  34.083841   \n",
            "4  b11c324e9d8022ba2a8e6488    2/20/18 15:23  2/20/18 16:59  34.083607   \n",
            "\n",
            "   visit_long  visit_weight  customer_weight  user_home_lat  user_home_long  \\\n",
            "0  -84.539238            42       107.481849      34.086699      -84.680138   \n",
            "1  -84.539071            43       107.481849      34.086319      -84.682973   \n",
            "2  -84.538882            43       107.481849      34.084975      -84.680135   \n",
            "3  -84.539043            40       107.481849      34.085111      -84.680941   \n",
            "4  -84.539051            42       107.481849      34.085419      -84.682946   \n",
            "\n",
            "   user_work_lat  user_work_long  \n",
            "0      34.034895      -84.466837  \n",
            "1      34.033394      -84.467965  \n",
            "2      34.034514      -84.466983  \n",
            "3      34.034851      -84.468514  \n",
            "4      34.036142      -84.466345  \n",
            "Shape: (11757, 13)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Data Types: Verify data types of the columns are as expected.\n",
        "\n",
        "print(\"Data types for Planet Fitness 10790\")\n",
        "print(visits_pf_10790.dtypes)\n",
        "\n",
        "print(\"\\nData from Planet Fitness 13071\")\n",
        "print(visits_pf_13071.dtypes)\n",
        "\n",
        "print(\"\\nData types for Planet Fitness 1570\")\n",
        "print(visits_pf_1570.dtypes)\n",
        "\n",
        "print(\"\\nData types for Planet Fitness 299\")\n",
        "print(visits_pf_299.dtypes)"
      ],
      "metadata": {
        "id": "Qfc_EHZXySoJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fe6d6a6e-980a-467f-ecb3-8dfba067c519"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data types for Planet Fitness 10790\n",
            "device_id            object\n",
            "visit_id             object\n",
            "venue_id             object\n",
            "visit_start_time     object\n",
            "visit_end_time       object\n",
            "visit_lat           float64\n",
            "visit_long          float64\n",
            "visit_weight        float64\n",
            "customer_weight     float64\n",
            "user_home_lat       float64\n",
            "user_home_long      float64\n",
            "user_work_lat       float64\n",
            "user_work_long      float64\n",
            "dtype: object\n",
            "\n",
            "Data from Planet Fitness 13071\n",
            "device_id            object\n",
            "visit_id             object\n",
            "venue_id             object\n",
            "visit_start_time     object\n",
            "visit_end_time       object\n",
            "visit_lat           float64\n",
            "visit_long          float64\n",
            "visit_weight        float64\n",
            "customer_weight     float64\n",
            "user_home_lat       float64\n",
            "user_home_long      float64\n",
            "user_work_lat       float64\n",
            "user_work_long      float64\n",
            "dtype: object\n",
            "\n",
            "Data types for Planet Fitness 1570\n",
            "device_id            object\n",
            "visit_id             object\n",
            "venue_id             object\n",
            "visit_start_time     object\n",
            "visit_end_time       object\n",
            "visit_lat           float64\n",
            "visit_long          float64\n",
            "visit_weight        float64\n",
            "customer_weight     float64\n",
            "user_home_lat       float64\n",
            "user_home_long      float64\n",
            "user_work_lat       float64\n",
            "user_work_long      float64\n",
            "dtype: object\n",
            "\n",
            "Data types for Planet Fitness 299\n",
            "device_id            object\n",
            "visit_id             object\n",
            "venue_id             object\n",
            "visit_start_time     object\n",
            "visit_end_time       object\n",
            "visit_lat           float64\n",
            "visit_long          float64\n",
            "visit_weight          int64\n",
            "customer_weight     float64\n",
            "user_home_lat       float64\n",
            "user_home_long      float64\n",
            "user_work_lat       float64\n",
            "user_work_long      float64\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Missing Values: Print the total of missing values to define handling\n",
        "\n",
        "print(\"Missing values in Planet Fitness 10790\")\n",
        "print(visits_pf_10790.isnull().sum())\n",
        "\n",
        "print(\"Missing values in Planet Fitness 13071\")\n",
        "print(visits_pf_13071.isnull().sum())\n",
        "\n",
        "print(\"Missing values in Planet Fitness 1570\")\n",
        "print(visits_pf_1570.isnull().sum())\n",
        "\n",
        "print(\"Missing values in Planet Fitness 299\")\n",
        "print(visits_pf_299.isnull().sum())\n"
      ],
      "metadata": {
        "id": "QqRk3mUny6rt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3b4916ee-9e21-4d07-aa7e-5ce0becc1008"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing values in Planet Fitness 10790\n",
            "device_id             0\n",
            "visit_id              0\n",
            "venue_id              0\n",
            "visit_start_time      0\n",
            "visit_end_time        0\n",
            "visit_lat             0\n",
            "visit_long            0\n",
            "visit_weight          0\n",
            "customer_weight       0\n",
            "user_home_lat         0\n",
            "user_home_long        0\n",
            "user_work_lat       747\n",
            "user_work_long      747\n",
            "dtype: int64\n",
            "Missing values in Planet Fitness 13071\n",
            "device_id              0\n",
            "visit_id               0\n",
            "venue_id               0\n",
            "visit_start_time       0\n",
            "visit_end_time         0\n",
            "visit_lat              0\n",
            "visit_long             0\n",
            "visit_weight           0\n",
            "customer_weight        0\n",
            "user_home_lat          0\n",
            "user_home_long         0\n",
            "user_work_lat       1076\n",
            "user_work_long      1076\n",
            "dtype: int64\n",
            "Missing values in Planet Fitness 1570\n",
            "device_id              0\n",
            "visit_id               0\n",
            "venue_id               0\n",
            "visit_start_time       0\n",
            "visit_end_time         0\n",
            "visit_lat              0\n",
            "visit_long             0\n",
            "visit_weight           0\n",
            "customer_weight        0\n",
            "user_home_lat          0\n",
            "user_home_long         0\n",
            "user_work_lat       1526\n",
            "user_work_long      1526\n",
            "dtype: int64\n",
            "Missing values in Planet Fitness 299\n",
            "device_id              0\n",
            "visit_id               0\n",
            "venue_id               0\n",
            "visit_start_time       0\n",
            "visit_end_time         0\n",
            "visit_lat              0\n",
            "visit_long             0\n",
            "visit_weight           0\n",
            "customer_weight        0\n",
            "user_home_lat          0\n",
            "user_home_long         0\n",
            "user_work_lat       2413\n",
            "user_work_long      2413\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Descriptive statistics: Descriptive statistics for the numerical columns, distributions of these variables.\n",
        "\n",
        "print(\"Descriptive statistics for Planet Fitness 10790\")\n",
        "print(visits_pf_10790.describe())\n",
        "\n",
        "print(\"Descriptive statistics for Planet Fitness 13071\")\n",
        "print(visits_pf_13071.describe())\n",
        "\n",
        "print(\"Descriptive statistics for Planet Fitness 1570\")\n",
        "print(visits_pf_1570.describe())\n",
        "\n",
        "print(\"Descriptive statistics for Planet Fitness 299\")\n",
        "print(visits_pf_299.describe())\n"
      ],
      "metadata": {
        "id": "0fvPZqWw0fdx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e24b6bb8-387e-474e-f03f-925df4391cb8"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Descriptive statistics for Planet Fitness 10790\n",
            "         visit_lat   visit_long  visit_weight  customer_weight  user_home_lat  \\\n",
            "count  4665.000000  4665.000000   4665.000000      4665.000000    4665.000000   \n",
            "mean     34.042518   -84.341883     31.633412        26.190206      34.037451   \n",
            "std       0.000114     0.000221     16.771900        74.280995       0.616202   \n",
            "min      34.041801   -84.343391      7.706278         0.000000      24.567692   \n",
            "25%      34.042465   -84.342018     22.465854         0.000000      34.020583   \n",
            "50%      34.042515   -84.341835     28.729092         0.000000      34.039154   \n",
            "75%      34.042566   -84.341736     34.716838        52.087857      34.057805   \n",
            "max      34.043159   -84.341125    183.033562       752.172979      47.885243   \n",
            "\n",
            "       user_home_long  user_work_lat  user_work_long  \n",
            "count     4665.000000    3918.000000     3918.000000  \n",
            "mean       -84.479881      34.008128      -84.363408  \n",
            "std          2.024699       0.499724        0.751988  \n",
            "min       -122.259301      25.932324     -122.326132  \n",
            "25%        -84.377689      33.925082      -84.375329  \n",
            "50%        -84.345723      34.041108      -84.344619  \n",
            "75%        -84.324316      34.060266      -84.309208  \n",
            "max        -77.757116      47.609934      -77.047380  \n",
            "Descriptive statistics for Planet Fitness 13071\n",
            "         visit_lat   visit_long  visit_weight  customer_weight  user_home_lat  \\\n",
            "count  6990.000000  6990.000000   6990.000000      6990.000000    6990.000000   \n",
            "mean     34.101371   -84.268986     23.503457        17.271491      34.104461   \n",
            "std       0.000071     0.000169     15.272917        28.966829       1.032492   \n",
            "min      34.100731   -84.269608      0.000000         0.000000      24.567596   \n",
            "25%      34.101337   -84.269081     17.436156         0.000000      34.093974   \n",
            "50%      34.101373   -84.269020     20.619947         0.000000      34.109231   \n",
            "75%      34.101406   -84.268890     26.461384        50.122699      34.136625   \n",
            "max      34.101776   -84.267822    372.737299       229.481309      47.711086   \n",
            "\n",
            "       user_home_long  user_work_lat  user_work_long  \n",
            "count     6990.000000    5914.000000     5914.000000  \n",
            "mean       -84.276203      34.090010      -84.305486  \n",
            "std          1.549886       0.801479        1.468370  \n",
            "min       -121.539410      26.391470     -122.211436  \n",
            "25%        -84.288448      33.991737      -84.320335  \n",
            "50%        -84.265019      34.073783      -84.274096  \n",
            "75%        -84.244374      34.114180      -84.238134  \n",
            "max        -70.962353      47.671353      -70.508711  \n",
            "Descriptive statistics for Planet Fitness 1570\n",
            "         visit_lat   visit_long  visit_weight  customer_weight  user_home_lat  \\\n",
            "count  6313.000000  6313.000000   6313.000000      6313.000000    6313.000000   \n",
            "mean     34.018711   -84.311813     33.028001        29.893240      34.069010   \n",
            "std       0.000159     0.000349     17.290645        47.584148       1.014213   \n",
            "min      34.018082   -84.313454      7.660433         0.000000      21.276465   \n",
            "25%      34.018594   -84.312149     22.864035         0.000000      33.986786   \n",
            "50%      34.018707   -84.311752     30.148807         0.000000      34.009589   \n",
            "75%      34.018829   -84.311531     37.662066        66.548708      34.036882   \n",
            "max      34.019409   -84.310539    379.785498       386.583989      47.615605   \n",
            "\n",
            "       user_home_long  user_work_lat  user_work_long  \n",
            "count     6313.000000    4787.000000     4787.000000  \n",
            "mean       -84.348866      34.030946      -84.304311  \n",
            "std          2.434472       0.978520        1.968393  \n",
            "min       -157.826750      25.703155     -122.753674  \n",
            "25%        -84.327059      33.907063      -84.371126  \n",
            "50%        -84.286328      34.016623      -84.311947  \n",
            "75%        -84.267321      34.047076      -84.259943  \n",
            "max        -71.025722      47.613771      -71.270764  \n",
            "Descriptive statistics for Planet Fitness 299\n",
            "          visit_lat    visit_long  visit_weight  customer_weight  \\\n",
            "count  11757.000000  11757.000000  11757.000000     11757.000000   \n",
            "mean      34.083651    -84.539103     25.302373        20.361256   \n",
            "std        0.000145      0.000175     12.129771        35.705789   \n",
            "min       34.082535    -84.540092      5.000000         0.000000   \n",
            "25%       34.083580    -84.539177     19.000000         0.000000   \n",
            "50%       34.083656    -84.539093     24.000000         0.000000   \n",
            "75%       34.083733    -84.539015     28.000000        53.858819   \n",
            "max       34.084206    -84.537857    161.000000       608.016703   \n",
            "\n",
            "       user_home_lat  user_home_long  user_work_lat  user_work_long  \n",
            "count   11757.000000    11757.000000    9344.000000     9344.000000  \n",
            "mean       34.108797      -84.547373      34.047027      -84.496445  \n",
            "std         0.822242        1.569218       0.714554        1.416479  \n",
            "min        25.936185     -122.714085      25.773159     -119.230322  \n",
            "25%        34.073456      -84.586462      33.978216      -84.558108  \n",
            "50%        34.099393      -84.538543      34.051476      -84.516300  \n",
            "75%        34.140396      -84.496592      34.112930      -84.405195  \n",
            "max        44.692445      -72.418923      42.695015      -72.450011  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot visit_weight\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(visits_pf_10790['visit_weight'], bins=30, edgecolor='black')\n",
        "plt.title(\"Distribution of visit_weight for Planet Fitness 10790\")\n",
        "plt.xlabel(\"visit_weight\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(visits_pf_13071['visit_weight'], bins=30, edgecolor='black')\n",
        "plt.title(\"Distribution of visit_weight for Planet Fitness 13071\")\n",
        "plt.xlabel(\"visit_weight\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(visits_pf_1570['visit_weight'], bins=30, edgecolor='black')\n",
        "plt.title(\"Distribution of visit_weight for Planet Fitness 1570\")\n",
        "plt.xlabel(\"visit_weight\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(visits_pf_299['visit_weight'], bins=30, edgecolor='black')\n",
        "plt.title(\"Distribution of visit_weight for Planet Fitness 299\")\n",
        "plt.xlabel(\"visit_weight\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "aPnIFXZn1Bq0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "c4da8139-3af6-47ff-cef5-a3740ee42a42"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Exploratory Data Analysis Summary: \n",
        "*   The data consists of visits to different Planet Fitness locations: 10790, 13071, 1570, and 299.\n",
        "*   The shape of the data for each venue is as follows: 10790 (4665 visits), 13071 (6990 visits), 1570 (6313 visits), and 299 (11757 visits).\n",
        "*   The data types of the columns are primarily object (for strings) and float64 (for numerical values), **except for the visit_weight column in the dataset for 299, which is an integer**.\n",
        "*   There are **missing values in the user_work_lat and user_work_long** columns for all venues, with varying numbers of missing values: 10790 (747 missing), 13071 (1076 missing), 1570 (1526 missing), and 299 (2413 missing).\n",
        "<br> <br/>\n",
        "\n",
        "### Next Steps to Normalize the Data:\n",
        "*   **Missing Values**: Address the missing values in the user_work_lat and user_work_long columns.\n",
        "*   **Data Types**: Convert visit_start_time and visit_end_time columns to datetime data type. Convert Planet Fitness 299' visit_weight from (int64) to (float64). \n",
        "*   **Feature Engineering**: Extract additional meaningful features from the existing columns if needed.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "2_oYAcVd35U6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Preprocessing**\n",
        "\n",
        "\n",
        "\n",
        "1.   The code performs data type conversion, rounding, and column manipulation on various DataFrames. It converts the 'visit_weight' column to float, adds venue street information, converts date-time columns to datetime data type, rounds coordinate values, and adds a ranking column based on 'visit_weight'.\n",
        "2.   Additionally, the code preprocesses the 'median_income_S1901' DataFrame by dropping rows, resetting the index, selecting specific columns, removing prefixes, renaming columns, replacing values, and converting data types.\n",
        "3.   The 'sex_age_S0101' DataFrame undergoes preprocessing steps such as removing spaces in column headers, selecting specific columns, removing rows, changing data types, removing prefixes, renaming columns, replacing non-numeric characters, converting columns to float, removing extra characters, changing data types, and dropping original columns.**texto en negrita**\n",
        "\n"
      ],
      "metadata": {
        "id": "FBRyFzyjw3nm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Venues Data Preprocessing"
      ],
      "metadata": {
        "id": "nfuLRD440blp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert Planet Fitness 299' visit_weight from (int64) to (float64).\n",
        "\n",
        "visits_pf_299['visit_weight'] = visits_pf_299['visit_weight'].astype(float)"
      ],
      "metadata": {
        "id": "gLNpzc3E8dVo"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Adding Venue's Street for Clarity \n",
        "\n",
        "visits_pf_10790['venue_street'] = '10790 Alpharetta Hwy, Roswell'\n",
        "visits_pf_13071['venue_street'] = '13071 Highway 9, Milton'\n",
        "visits_pf_1570['venue_street'] = '1570 Holcomb Bridge Road, Roswell'\n",
        "visits_pf_299['venue_street'] = '299 Molly Lane, Woodstock' "
      ],
      "metadata": {
        "id": "9FWrrd0rrZ2j"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "visits_metadata"
      ],
      "metadata": {
        "id": "PsZJiPDiHVkU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "0f30f524-50a8-468d-adf3-a25cf608cc00"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   #      venue_name                                      venue_address  \\\n",
              "0  1  Planet Fitness  10790 Alpharetta Hwy, Roswell, GA 30076, Roswe...   \n",
              "1  2  Planet Fitness  1570 Holcomb Bridge Road, Roswell, Georgia, Un...   \n",
              "2  3  Planet Fitness         13071 Highway 9, Milton, GA, United States   \n",
              "3  4  Planet Fitness       299 Molly Lane, Woodstock, GA, United States   \n",
              "\n",
              "   venue_lat  venue_lng           notes  \n",
              "0  34.042468 -84.342179  underperfoming  \n",
              "1  34.018754 -84.311867             NaN  \n",
              "2  34.101378 -84.268668             NaN  \n",
              "3  34.083409 -84.538985             NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-84ce1264-e150-49e7-8398-a49b13d927c7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>#</th>\n",
              "      <th>venue_name</th>\n",
              "      <th>venue_address</th>\n",
              "      <th>venue_lat</th>\n",
              "      <th>venue_lng</th>\n",
              "      <th>notes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Planet Fitness</td>\n",
              "      <td>10790 Alpharetta Hwy, Roswell, GA 30076, Roswe...</td>\n",
              "      <td>34.042468</td>\n",
              "      <td>-84.342179</td>\n",
              "      <td>underperfoming</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Planet Fitness</td>\n",
              "      <td>1570 Holcomb Bridge Road, Roswell, Georgia, Un...</td>\n",
              "      <td>34.018754</td>\n",
              "      <td>-84.311867</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Planet Fitness</td>\n",
              "      <td>13071 Highway 9, Milton, GA, United States</td>\n",
              "      <td>34.101378</td>\n",
              "      <td>-84.268668</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Planet Fitness</td>\n",
              "      <td>299 Molly Lane, Woodstock, GA, United States</td>\n",
              "      <td>34.083409</td>\n",
              "      <td>-84.538985</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84ce1264-e150-49e7-8398-a49b13d927c7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-84ce1264-e150-49e7-8398-a49b13d927c7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-84ce1264-e150-49e7-8398-a49b13d927c7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#  Convert visit_start_time and visit_end_time columns to datetime data type\n",
        "\n",
        "visits_pf_10790['visit_start_time'] = pd.to_datetime(visits_pf_10790['visit_start_time'])\n",
        "visits_pf_10790['visit_end_time'] = pd.to_datetime(visits_pf_10790['visit_end_time'])\n",
        "\n",
        "visits_pf_13071['visit_start_time'] = pd.to_datetime(visits_pf_13071['visit_start_time'])\n",
        "visits_pf_13071['visit_end_time'] = pd.to_datetime(visits_pf_13071['visit_end_time'])\n",
        "\n",
        "visits_pf_1570['visit_start_time'] = pd.to_datetime(visits_pf_1570['visit_start_time'])\n",
        "visits_pf_1570['visit_end_time'] = pd.to_datetime(visits_pf_1570['visit_end_time'])\n",
        "\n",
        "visits_pf_299['visit_start_time'] = pd.to_datetime(visits_pf_299['visit_start_time'])\n",
        "visits_pf_299['visit_end_time'] = pd.to_datetime(visits_pf_299['visit_end_time'])"
      ],
      "metadata": {
        "id": "B3LkQeVk8xAh"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to round latitude and longitude values to 6 decimal digits\n",
        "def round_coordinates(df):\n",
        "    df['visit_lat'] = df['visit_lat'].round(6)\n",
        "    df['visit_long'] = df['visit_long'].round(6)\n",
        "    df['user_home_lat'] = df['user_home_lat'].round(6)\n",
        "    df['user_home_long'] = df['user_home_long'].round(6)\n",
        "    df['user_work_lat'] = df['user_work_lat'].round(6)\n",
        "    df['user_work_long'] = df['user_work_long'].round(6)\n",
        "    return df\n",
        "\n",
        "# Apply rounding to each dataset\n",
        "visits_pf_10790 = round_coordinates(visits_pf_10790)\n",
        "visits_pf_13071 = round_coordinates(visits_pf_13071)\n",
        "visits_pf_1570 = round_coordinates(visits_pf_1570)\n",
        "visits_pf_299 = round_coordinates(visits_pf_299)"
      ],
      "metadata": {
        "id": "EP_9sm4s-464"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Add Venue Performance Rank: Assign visit_weight_rank based on the ranking of total visit_weight, where a lower rank indicates higher performance\n",
        "\n",
        "visits_pf_10790['visit_weight_rank'] = 4\n",
        "visits_pf_13071['visit_weight_rank'] = 3\n",
        "visits_pf_1570['visit_weight_rank'] = 2\n",
        "visits_pf_299['visit_weight_rank'] = 1 \n",
        "\n",
        "## Code to Calculate the Rank\n",
        "\n",
        "#venue_performance = visits_pf_all.groupby('venue_street')['visit_weight'].sum().reset_index()\n",
        "#venue_performance = venue_performance.sort_values(by='visit_weight', ascending=False)\n",
        "#venue_performance['rank'] = range(1, len(venue_performance) + 1)\n",
        "#print(venue_performance[['venue_street', 'visit_weight', 'rank']])"
      ],
      "metadata": {
        "id": "FSxGjxugtibO"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Concatenate all venues\n",
        "visits_pf_all = pd.concat([visits_pf_10790, visits_pf_13071, visits_pf_1570, visits_pf_299])"
      ],
      "metadata": {
        "id": "PC68INv6BKLQ"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Median Income Data Preprocessing "
      ],
      "metadata": {
        "id": "7UyLjQYc0ju9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop the second row\n",
        "median_income_S1901 = median_income_S1901.iloc[1:]\n",
        "\n",
        "# Reset the index\n",
        "median_income_S1901.reset_index(drop=True, inplace=True)"
      ],
      "metadata": {
        "id": "SHTKqA320ttQ"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop columns except 'NAME' and 'S1901_C01_012E'\n",
        "columns_to_keep = ['NAME', 'S1901_C01_012E']\n",
        "median_income_S1901 = median_income_S1901[columns_to_keep]"
      ],
      "metadata": {
        "id": "2cHQsXnr8pQz"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove the prefix \"ZCTA5 \" from column NAME\n",
        "median_income_S1901['NAME'] = median_income_S1901['NAME'].str.replace(r'^ZCTA5 (\\d{5})$', r'\\1', regex=True)"
      ],
      "metadata": {
        "id": "u5IRO3Yz8q3V"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Rename columns\n",
        "median_income_S1901.rename(columns={'NAME': 'geoid', 'S1901_C01_012E': 'household_median_income'}, inplace=True)"
      ],
      "metadata": {
        "id": "Irt84R298tbZ"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Replace '-' values with NaN\n",
        "median_income_S1901['household_median_income'].replace('-', np.nan, inplace=True)"
      ],
      "metadata": {
        "id": "pgFX3qAF8vZe"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Preprocess 'household_median_income' column to remove non-numeric characters\n",
        "median_income_S1901['household_median_income'] = median_income_S1901['household_median_income'].str.replace('[^\\d.]', '', regex=True)\n"
      ],
      "metadata": {
        "id": "T-ONN-vDBtF0"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert 'household_median_income' column to float (because np.nan is a float)\n",
        "median_income_S1901['household_median_income'] = median_income_S1901['household_median_income'].astype(float)"
      ],
      "metadata": {
        "id": "VT4LWaUc8xkA"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert geoid to integer\n",
        "median_income_S1901['geoid'] = median_income_S1901['geoid'].astype(int)"
      ],
      "metadata": {
        "id": "m7EiIycu-KRj"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Sex Age Preprocessing"
      ],
      "metadata": {
        "id": "wwov2ExujDQB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove any extra spaces in the column headers\n",
        "sex_age_S0101.columns = sex_age_S0101.columns.str.strip()"
      ],
      "metadata": {
        "id": "jtL9N55hz3zp"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Keep only the specified columns\n",
        "sex_age_S0101 = sex_age_S0101[['NAME', \n",
        "                                'S0101_C01_005E', 'S0101_C01_006E', 'S0101_C01_007E', 'S0101_C01_008E',\n",
        "                                'S0101_C01_009E', 'S0101_C01_010E', 'S0101_C01_011E', 'S0101_C01_012E',\n",
        "                                'S0101_C03_005E', 'S0101_C03_006E', 'S0101_C03_007E', 'S0101_C03_008E',\n",
        "                                'S0101_C03_009E', 'S0101_C03_010E', 'S0101_C03_011E', 'S0101_C03_012E',\n",
        "                                'S0101_C05_005E', 'S0101_C05_006E', 'S0101_C05_007E', 'S0101_C05_008E',\n",
        "                                'S0101_C05_009E', 'S0101_C05_010E', 'S0101_C05_011E', 'S0101_C05_012E']]\n"
      ],
      "metadata": {
        "id": "NcibEoYYz4fb"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sex_age_S0101 = sex_age_S0101[1:]"
      ],
      "metadata": {
        "id": "DnT1yq4Y1uuC"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Change Data Type of Numeric Columns\n",
        "\n",
        "cols_to_convert = ['S0101_C01_005E', 'S0101_C01_006E', 'S0101_C01_007E', 'S0101_C01_008E',\n",
        "                   'S0101_C01_009E', 'S0101_C01_010E', 'S0101_C01_011E', 'S0101_C01_012E',\n",
        "                   'S0101_C03_005E', 'S0101_C03_006E', 'S0101_C03_007E', 'S0101_C03_008E',\n",
        "                   'S0101_C03_009E', 'S0101_C03_010E', 'S0101_C03_011E', 'S0101_C03_012E',\n",
        "                   'S0101_C05_005E', 'S0101_C05_006E', 'S0101_C05_007E', 'S0101_C05_008E',\n",
        "                   'S0101_C05_009E', 'S0101_C05_010E', 'S0101_C05_011E', 'S0101_C05_012E']\n",
        "\n",
        "for col in cols_to_convert:\n",
        "    sex_age_S0101[col] = sex_age_S0101[col].astype(float)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "_rLgRwtR31jL"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove the \"ZCTA5 \" from the content of NAME\n",
        "sex_age_S0101['NAME'] = sex_age_S0101['NAME'].str.replace(\"ZCTA5 \", \"\")"
      ],
      "metadata": {
        "id": "PBbB8Ib8_17o"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Change geoid to integer\n",
        "sex_age_S0101['NAME'] = pd.to_numeric(sex_age_S0101['NAME'], errors='coerce')"
      ],
      "metadata": {
        "id": "NTVjEKgqlYRL"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Group the columns as requested\n",
        "sex_age_S0101['total_population_15_19'] = sex_age_S0101['S0101_C01_005E']\n",
        "sex_age_S0101['total_population_20_34'] = sex_age_S0101[['S0101_C01_006E', 'S0101_C01_007E', 'S0101_C01_008E']].sum(axis=1)\n",
        "sex_age_S0101['total_population_35_54'] = sex_age_S0101[['S0101_C01_009E', 'S0101_C01_010E', 'S0101_C01_011E', 'S0101_C01_012E']].sum(axis=1)\n",
        "sex_age_S0101['male_population_15_19'] = sex_age_S0101['S0101_C03_005E']\n",
        "sex_age_S0101['male_population_20_34'] = sex_age_S0101[['S0101_C03_006E', 'S0101_C03_007E', 'S0101_C03_008E']].sum(axis=1)\n",
        "sex_age_S0101['male_population_35_54'] = sex_age_S0101[['S0101_C03_009E', 'S0101_C03_010E', 'S0101_C03_011E', 'S0101_C03_012E']].sum(axis=1)\n",
        "sex_age_S0101['female_population_15_19'] = sex_age_S0101['S0101_C05_005E']\n",
        "sex_age_S0101['female_population_20_34'] = sex_age_S0101[['S0101_C05_006E', 'S0101_C05_007E', 'S0101_C05_008E']].sum(axis=1)\n",
        "sex_age_S0101['female_population_35_54'] = sex_age_S0101[['S0101_C05_009E', 'S0101_C05_010E', 'S0101_C05_011E', 'S0101_C05_012E']].sum(axis=1)"
      ],
      "metadata": {
        "id": "Os9vH9Qjz7KQ"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop the original columns\n",
        "sex_age_S0101.drop(['S0101_C01_005E', 'S0101_C01_006E', 'S0101_C01_007E', 'S0101_C01_008E',\n",
        "                    'S0101_C01_009E', 'S0101_C01_010E', 'S0101_C01_011E', 'S0101_C01_012E',\n",
        "                    'S0101_C03_005E', 'S0101_C03_006E', 'S0101_C03_007E', 'S0101_C03_008E',\n",
        "                    'S0101_C03_009E', 'S0101_C03_010E', 'S0101_C03_011E', 'S0101_C03_012E',\n",
        "                    'S0101_C05_005E', 'S0101_C05_006E', 'S0101_C05_007E', 'S0101_C05_008E',\n",
        "                    'S0101_C05_009E', 'S0101_C05_010E', 'S0101_C05_011E', 'S0101_C05_012E'], axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "PHfQ5msB0PoJ"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Rename NAME to geoid\n",
        "sex_age_S0101.rename(columns={'NAME': 'geoid'}, inplace=True)"
      ],
      "metadata": {
        "id": "BjLm40NF0hJ_"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Feature Engineering**\n",
        "\n",
        "\n",
        "1.   The code performs feature engineering on the 'visits_pf_all' DataFrame, creating features such as visit duration, visit day of the week, time of day, distance from home to gym, distance from work to gym, and total distance.\n",
        "2.   It merges demographic data, household median income, and population data into the 'visits_pf_all' DataFrame, adding relevant information for analysis.\n"
      ],
      "metadata": {
        "id": "gZTpfJFK-738"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Native Data Feature Engineering"
      ],
      "metadata": {
        "id": "LpdXA6CtXpud"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the visit duration feature\n",
        "visits_pf_all['visit_duration'] = ((visits_pf_all['visit_end_time'] - visits_pf_all['visit_start_time']).dt.total_seconds() / 60).round(2) # convert to minutes and round to 2 decimals"
      ],
      "metadata": {
        "id": "M0wW0Ib4BEcl"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the visit day of the week feature\n",
        "visits_pf_all['visit_day_of_week'] = visits_pf_all['visit_start_time'].dt.day_name()"
      ],
      "metadata": {
        "id": "QDwbc8smEjfS"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def tag_day_type(df):\n",
        "    # Define a dictionary that maps days of the week to their types\n",
        "    day_type = {\n",
        "        'Monday': 'Weekday',\n",
        "        'Tuesday': 'Weekday',\n",
        "        'Wednesday': 'Weekday',\n",
        "        'Thursday': 'Weekday',\n",
        "        'Friday': 'Weekday',\n",
        "        'Saturday': 'Weekend',\n",
        "        'Sunday': 'Weekend'\n",
        "    }\n",
        "\n",
        "    # Create a new column 'day_type' by mapping the 'visit_day_of_week' column using the day_type dictionary\n",
        "    df['day_type'] = df['visit_day_of_week'].map(day_type)\n",
        "\n",
        "    return df\n",
        "\n",
        "visits_pf_all = tag_day_type(visits_pf_all)"
      ],
      "metadata": {
        "id": "S02pK3Er4Fme"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the visit hour of the day feature\n",
        "visits_pf_all['visit_hour_of_day'] = visits_pf_all['visit_start_time'].dt.hour"
      ],
      "metadata": {
        "id": "UTi-m35tEvKK"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define categorization functions\n",
        "def time_of_day_basic(hour):\n",
        "    if 0 <= hour < 6:\n",
        "        return '1. Early Morning'\n",
        "    elif 6 <= hour < 9:\n",
        "        return '2. Peak Hours Morning'\n",
        "    elif 9 <= hour < 11:\n",
        "        return '3. Late Morning Hours'\n",
        "    elif 11 <= hour < 16:\n",
        "        return '4. Office Hours'\n",
        "    elif 16 <= hour < 19:\n",
        "        return '5. Peak Hours Afternoon'\n",
        "    elif 19 <= hour < 21:\n",
        "        return '6. Early Night'\n",
        "    else:\n",
        "        return '7. Night'\n",
        "\n",
        "\n",
        "# Apply categorizations\n",
        "visits_pf_all['time_of_day_basic'] = visits_pf_all['visit_hour_of_day'].apply(time_of_day_basic)"
      ],
      "metadata": {
        "id": "2qSjbA4wvbJe"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the distance from home to gym feature in miles\n",
        "visits_pf_all['home_to_gym_distance'] = visits_pf_all.apply(lambda row: geodesic((row['user_home_lat'], row['user_home_long']), (row['visit_lat'], row['visit_long'])).miles, axis=1)"
      ],
      "metadata": {
        "id": "IXH5izwLEa5R"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the distance from work to gym feature, skipping rows with NaN coordinates in miles\n",
        "visits_pf_all['work_to_gym_distance'] = visits_pf_all.apply(\n",
        "    lambda row: geodesic(\n",
        "        (row['user_work_lat'], row['user_work_long']), \n",
        "        (row['visit_lat'], row['visit_long'])\n",
        "    ).miles if pd.notnull(row['user_work_lat']) and pd.notnull(row['user_work_long']) else np.nan, \n",
        "    axis=1\n",
        ")"
      ],
      "metadata": {
        "id": "Hh39veQHEjmB"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a new column with the sum of 'home_to_gym_distance' and 'work_to_gym_distance', but only if 'work_to_gym_distance' is not NaN\n",
        "visits_pf_all['total_distance'] = np.where(visits_pf_all['work_to_gym_distance'].notna(), \n",
        "                                          visits_pf_all['home_to_gym_distance'] + visits_pf_all['work_to_gym_distance'], \n",
        "                                          np.nan)\n"
      ],
      "metadata": {
        "id": "i42tq-QpBqwI"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_total_distance(row):\n",
        "    if row['day_type'] == 'Weekday':\n",
        "        if row['time_of_day_basic'] in ['1. Early Morning', '3. Late Morning Hours', '4. Office Hours', '7. Night']:\n",
        "            return row['home_to_gym_distance'] * 2\n",
        "        elif row['time_of_day_basic'] in ['2. Peak Hours Morning', '5. Peak Hours Afternoon', '6. Early Night']:\n",
        "            if pd.notna(row['work_to_gym_distance']):\n",
        "                return row['home_to_gym_distance'] + row['work_to_gym_distance']\n",
        "            else:\n",
        "                return np.nan\n",
        "    elif row['day_type'] == 'Weekend':\n",
        "        return row['home_to_gym_distance'] * 2\n",
        "\n",
        "# Apply the function to the DataFrame\n",
        "visits_pf_all['total_distance_weekday_time'] = visits_pf_all.apply(calculate_total_distance, axis=1)\n"
      ],
      "metadata": {
        "id": "L3o69Rxb6nWO"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the next date in the future. Same day of week, same hours and seconds.\n",
        "import datetime\n",
        "\n",
        "def calculate_next_day_of_week(start_time, end_time):\n",
        "    today = datetime.date.today()\n",
        "    current_day = start_time.weekday()\n",
        "    days_ahead = (current_day - today.weekday()) % 7\n",
        "\n",
        "    if days_ahead == 0:\n",
        "        days_ahead += 7\n",
        "\n",
        "    next_start_time = datetime.datetime.combine(today + datetime.timedelta(days=days_ahead), start_time.time())\n",
        "    next_end_time = datetime.datetime.combine(today + datetime.timedelta(days=days_ahead), end_time.time())\n",
        "\n",
        "    return next_start_time, next_end_time\n",
        "\n"
      ],
      "metadata": {
        "id": "KxaFP1TuAaC5"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "visits_pf_all['next_start_time'], visits_pf_all['next_end_time'] = zip(*visits_pf_all.apply(lambda row: calculate_next_day_of_week(row['visit_start_time'], row['visit_end_time']), axis=1))"
      ],
      "metadata": {
        "id": "ginY1j6tAiVs"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the count of each device_id\n",
        "device_id_counts = visits_pf_all['device_id'].value_counts().reset_index()\n",
        "\n",
        "# Rename the columns for clarity\n",
        "device_id_counts.columns = ['device_id', 'count']\n",
        "\n",
        "# Create a new column for the tag\n",
        "visits_pf_all['type_user'] = ''\n",
        "\n",
        "# Assign tags based on the count of device_id\n",
        "visits_pf_all.loc[visits_pf_all['device_id'].isin(device_id_counts[device_id_counts['count'] == 1]['device_id']), 'type_user'] = 'One-Time'\n",
        "visits_pf_all.loc[visits_pf_all['device_id'].isin(device_id_counts[device_id_counts['count'] > 1]['device_id']), 'type_user'] = 'Recurrent'\n"
      ],
      "metadata": {
        "id": "IrFosGxNFjBl"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Exclude visits with a total distance exceeding 80 miles.\n",
        "visits_pf_all = visits_pf_all[visits_pf_all['total_distance_weekday_time'] <= 80]"
      ],
      "metadata": {
        "id": "-88lqrhpYiIE"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop all the visits where total_distance is NaN \n",
        "visits_pf_all = visits_pf_all.dropna(subset=['total_distance'])"
      ],
      "metadata": {
        "id": "ORhc1P_tx9aB"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Demographic Data Feature Engineering"
      ],
      "metadata": {
        "id": "NBJZtPVFXyE5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a GEOID Location for Visit, Home and Work\n",
        "\n",
        "# Train a nearest neighbors model on the gazetteer data\n",
        "gazetteer_coords = gazetteer_zip[['INTPTLAT', 'INTPTLONG']].values\n",
        "nbrs = NearestNeighbors(n_neighbors=1).fit(gazetteer_coords)\n",
        "\n",
        "# Use the model to find the nearest GEOID for each visit location\n",
        "visit_coords = visits_pf_all[['visit_lat', 'visit_long']].values\n",
        "distances, indices = nbrs.kneighbors(visit_coords)\n",
        "visits_pf_all['geoid_visit'] = gazetteer_zip.iloc[indices.flatten()]['GEOID'].values\n",
        "\n",
        "visits_pf_all = visits_pf_all.reset_index(drop=True)\n",
        "\n",
        "# Repeat for home locations\n",
        "home_coords = visits_pf_all[['user_home_lat', 'user_home_long']].values\n",
        "distances, indices = nbrs.kneighbors(home_coords)\n",
        "visits_pf_all['geoid_user_home'] = gazetteer_zip.iloc[indices.flatten()]['GEOID'].values\n",
        "\n",
        "# Repeat for work locations, skipping NaNs\n",
        "work_rows = visits_pf_all.dropna(subset=['user_work_lat', 'user_work_long'])\n",
        "work_coords = work_rows[['user_work_lat', 'user_work_long']].values\n",
        "distances, indices = nbrs.kneighbors(work_coords, n_neighbors=1)\n",
        "geoid_user_work = pd.Series(gazetteer_zip.iloc[indices.flatten()]['GEOID'].values, index=work_rows.index)\n",
        "visits_pf_all['geoid_user_work'] = geoid_user_work\n",
        "\n",
        "print(\"Number of visit locations without corresponding GEOID:\", visits_pf_all['geoid_visit'].isna().sum())\n",
        "print(\"Number of home locations without corresponding GEOID:\", visits_pf_all['geoid_user_home'].isna().sum())\n",
        "print(\"Number of work locations without corresponding GEOID:\", visits_pf_all['geoid_user_work'].isna().sum())\n"
      ],
      "metadata": {
        "id": "Qgrj8LB0TbYj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4eaf71c4-c649-4aae-c038-f2915a1c541f"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of visit locations without corresponding GEOID: 0\n",
            "Number of home locations without corresponding GEOID: 0\n",
            "Number of work locations without corresponding GEOID: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge Income Data\n",
        "visits_pf_all = pd.merge(visits_pf_all, median_income_S1901, how='left', left_on='geoid_user_home', right_on='geoid')\n",
        "\n",
        "# Drop the 'geoid' column as it's redundant now\n",
        "visits_pf_all.drop('geoid', axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "Elg5Gzxl-SSl"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Household Median Income bining\n",
        "def categorize_income(df):\n",
        "    bins = [-np.inf, 30000, 70000, np.inf]\n",
        "    labels = ['Low Income', 'Medium Income', 'High Income']\n",
        "    df['income_category'] = pd.cut(df['household_median_income'], bins=bins, labels=labels)\n",
        "    return df\n",
        "\n",
        "visits_pf_all = categorize_income(visits_pf_all)"
      ],
      "metadata": {
        "id": "I46AzaPotdj-"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge Population Data\n",
        "visits_pf_all = pd.merge(visits_pf_all, sex_age_S0101, how='left', left_on='geoid_user_home', right_on='geoid')\n",
        "\n",
        "# Drop the 'geoid' column as it's redundant now\n",
        "visits_pf_all.drop('geoid', axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "2SjHuFQ4-Ezr"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Subset Creation**\n",
        "\n",
        "1. A data subset called 'visits_pf_peak_morning_sample' is created by filtering specific rows based on criteria such as peak morning hours, weekday visits, recurrent users, and venue street.\n",
        "2.   The Google Maps Matrix API is utilized to calculate driving durations between different locations, considering factors such as traffic and mode of transportation.\n",
        "The resulting 'visits_pf_peak_morning_sample' DataFrame is saved to Google Drive and then loaded back into memory for further analysis or storage."
      ],
      "metadata": {
        "id": "xbCQzOKGhhSr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Subset of Visitors at Peak Morning and Afternoon"
      ],
      "metadata": {
        "id": "cJZ0vkzUhmly"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter for peak hours only\n",
        "visits_pf_peak_hours = visits_pf_all.loc[(visits_pf_all['time_of_day_basic'] == '2. Peak Hours Morning') & \n",
        "                       (visits_pf_all['day_type'] == 'Weekday') & \n",
        "                       (visits_pf_all['type_user'] == 'Recurrent') &\n",
        "                       (visits_pf_all['venue_street'].isin(['10790 Alpharetta Hwy, Roswell', '1570 Holcomb Bridge Road, Roswell']))].copy()\n",
        "\n",
        "# Create quartiles for total_distance\n",
        "visits_pf_peak_hours['total_distance_quartiles'] = pd.qcut(visits_pf_peak_hours['total_distance'], q=4)\n",
        "\n",
        "# Create a combined stratification field\n",
        "visits_pf_peak_hours['strata'] = visits_pf_peak_hours['total_distance_quartiles'].astype(str) + \"_\" + visits_pf_peak_hours['venue_street']\n",
        "\n",
        "# Perform the stratified shuffle split based on the new strata field\n",
        "split = StratifiedShuffleSplit(n_splits=1, test_size=.8, random_state=42)  # adjust the test_size parameter to the size you want\n",
        "\n",
        "for train_index, sample_index in split.split(visits_pf_peak_hours, visits_pf_peak_hours[\"strata\"]):\n",
        "    strat_sample_set = visits_pf_peak_hours.iloc[sample_index]\n",
        "\n",
        "# Drop the temporary strata field and total_distance_quartiles\n",
        "visits_pf_peak_morning_sample = strat_sample_set.drop(['strata', 'total_distance_quartiles'], axis=1)\n",
        "\n",
        "# Display the shape of the new DataFrame\n",
        "print(f\"The sampled DataFrame contains {visits_pf_peak_morning_sample.shape[0]} rows.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0j1kT8pDhwKz",
        "outputId": "c0ef5d03-ed9b-4a32-fa73-25d665285475"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The sampled DataFrame contains 1314 rows.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Driving Duration Google Maps Matrix API"
      ],
      "metadata": {
        "id": "bk6hA5uiX-Gq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_driving_duration(origin, destination, arrival_time=None, departure_time=None, api_key=\"\"):\n",
        "    base_url = \"https://maps.googleapis.com/maps/api/distancematrix/json?\"\n",
        "    params = {\n",
        "        \"origins\": origin,\n",
        "        \"destinations\": destination,\n",
        "        \"key\": api_key,\n",
        "        \"traffic_model\": \"best_guess\",\n",
        "        \"mode\": \"driving\"\n",
        "    }\n",
        "    if arrival_time is not None:\n",
        "        params[\"arrival_time\"] = arrival_time\n",
        "    if departure_time is not None:\n",
        "        params[\"departure_time\"] = departure_time\n",
        "\n",
        "    response = requests.get(base_url, params=params).json()\n",
        "\n",
        "    if response['status'] != 'OK':\n",
        "        print(f\"API Error: {response}\")  # Print the whole response when an error occurs\n",
        "\n",
        "    rows = response.get('rows', [])\n",
        "    if rows:\n",
        "        elements = rows[0].get('elements', [])\n",
        "        if elements:\n",
        "            duration = elements[0].get('duration_in_traffic', {}).get('value', None)\n",
        "            return duration\n",
        "\n",
        "    return None\n"
      ],
      "metadata": {
        "id": "-71UbmisYHsT"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to apply on each row of DataFrame\n",
        "def calculate_driving_duration(row, api_key):\n",
        "    if pd.notna(row['user_work_lat']) and pd.notna(row['user_work_long']):\n",
        "        origin_work = f\"{row['user_work_lat']},{row['user_work_long']}\"\n",
        "    else:\n",
        "        return pd.Series([None, None, None, None])\n",
        "\n",
        "    destination = f\"{row['visit_lat']},{row['visit_long']}\"\n",
        "    origin_home = f\"{row['user_home_lat']},{row['user_home_long']}\" if pd.notna(row['user_home_lat']) and pd.notna(row['user_home_long']) else None\n",
        "\n",
        "    arrival_time_start = int(row['next_start_time'].timestamp())\n",
        "    departure_time_end = int(row['next_end_time'].timestamp())\n",
        "\n",
        "    # Get driving durations for each route\n",
        "    duration_from_gym_to_work = get_driving_duration(destination, origin_work, arrival_time=None, departure_time=departure_time_end, api_key=api_key)\n",
        "    duration_from_home_to_gym = get_driving_duration(origin_home, destination, arrival_time=None, departure_time=arrival_time_start, api_key=api_key) if origin_home else None\n",
        "\n",
        "    return pd.Series([duration_from_gym_to_work, duration_from_home_to_gym])\n",
        "\n",
        "# Set the API key\n",
        "api_key = \"AIzaSyDRRiBmldUUNKI3LRwn4fYqmcgdPpQIL4M\""
      ],
      "metadata": {
        "id": "z1RCh5bGbuEL"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# apply the function\n",
        "visits_pf_peak_morning_sample[['duration_from_gym_to_work', 'duration_from_home_to_gym']] = visits_pf_peak_morning_sample.apply(lambda row: calculate_driving_duration(row, api_key), axis=1)\n",
        "\n",
        "# set pandas options to display all columns\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "# Convert durations from seconds to minutes\n",
        "duration_cols = ['duration_from_gym_to_work', 'duration_from_home_to_gym']\n",
        "visits_pf_peak_morning_sample[duration_cols] = visits_pf_peak_morning_sample[duration_cols] / 60\n",
        "\n",
        "# print the head of the new DataFrame\n",
        "print(visits_pf_peak_morning_sample.head())"
      ],
      "metadata": {
        "id": "m4t6xd6kfZAu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Add the new column, total_duration_drive, the sum between the commute home to gym and gym to work\n",
        "visits_pf_peak_morning_sample['total_duration_drive'] = visits_pf_peak_morning_sample['duration_from_home_to_gym'] + visits_pf_peak_morning_sample['duration_from_gym_to_work']"
      ],
      "metadata": {
        "id": "HPIz1u0Nygir"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def save_to_drive(df, filename):\n",
        "    # Mount Google Drive\n",
        "    drive.mount('/content/drive')\n",
        "    file_path = '/content/drive/MyDrive/Colab Notebooks/' + filename\n",
        "\n",
        "    # Save DataFrame to csv file\n",
        "    df.to_csv(file_path, index=False)\n",
        "\n",
        "    # Check if file was saved\n",
        "    if os.path.isfile(file_path):\n",
        "        print(f\"{filename} saved successfully in Google Drive.\")\n",
        "    else:\n",
        "        print(f\"Failed to save {filename}.\")\n",
        "\n",
        "# Call the function\n",
        "save_to_drive(visits_pf_peak_morning_sample, 'visits_pf_peak_morning_sample.csv')"
      ],
      "metadata": {
        "id": "edVdnrBuxXdL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "save_to_drive(visits_pf_peak_morning_sample, 'visits_pf_peak_morning_sample.csv')"
      ],
      "metadata": {
        "id": "5nCDT7oFx-8N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "visits_pf_peak_morning_sample = pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/visits_pf_peak_morning_sample.csv')"
      ],
      "metadata": {
        "id": "BfKWULd0fePC"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Analysis**"
      ],
      "metadata": {
        "id": "V1-fZ5Px7kZO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visit Weight by Visit Start Time"
      ],
      "metadata": {
        "id": "6GLLRWfNX67E"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Overall Performance Analysis"
      ],
      "metadata": {
        "id": "aBNtdUVy0mA3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.graph_objects as go\n",
        "import locale\n",
        "\n",
        "# Set the locale for comma separators\n",
        "locale.setlocale(locale.LC_ALL, '')\n",
        "\n",
        "# Group the data by venue_street and calculate the sum of visit_weight\n",
        "venue_totals = visits_pf_all.groupby('venue_street')['visit_weight'].sum().reset_index()\n",
        "\n",
        "# Define the colors for the bars\n",
        "colors = ['#41459F', '#FFB524', '#FD5800', '#A3E0EB']\n",
        "\n",
        "# Create the bar plot\n",
        "fig = go.Figure(data=go.Bar(\n",
        "    x=venue_totals['venue_street'],\n",
        "    y=venue_totals['visit_weight'],\n",
        "    marker_color=colors,\n",
        "    text=venue_totals['visit_weight'].apply(lambda x: f'{locale.format_string(\"%0.2f\", x, grouping=True)}'),  # Format labels with comma separators\n",
        "    textposition='auto',  # Position the labels automatically\n",
        "))\n",
        "\n",
        "# Update layout\n",
        "fig.update_layout(\n",
        "    title='Total Visit Weight per Venue Street',\n",
        "    xaxis_title='Venue Street',\n",
        "    yaxis_title='Total Visit Weight',\n",
        "    yaxis_tickformat=',.2f',  # Format y-axis labels with comma separators and two decimal places\n",
        "    legend=dict(title='Venue Street'),\n",
        ")\n",
        "\n",
        "# Show the graph\n",
        "fig.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "tiUkh1N8IVsB",
        "outputId": "2b425aa7-2cf8-4442-beab-4c3a0379b3b8"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.18.2.min.js\"></script>                <div id=\"0457b99d-ee0b-4c1e-850c-630f3b9d1d44\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0457b99d-ee0b-4c1e-850c-630f3b9d1d44\")) {                    Plotly.newPlot(                        \"0457b99d-ee0b-4c1e-850c-630f3b9d1d44\",                        [{\"marker\":{\"color\":[\"#41459F\",\"#FFB524\",\"#FD5800\",\"#A3E0EB\"]},\"text\":[\"118,614.28\",\"120,026.68\",\"148,793.55\",\"212,825.00\"],\"textposition\":\"auto\",\"x\":[\"10790 Alpharetta Hwy, Roswell\",\"13071 Highway 9, Milton\",\"1570 Holcomb Bridge Road, Roswell\",\"299 Molly Lane, Woodstock\"],\"y\":[118614.27931411094,120026.67624978826,148793.5483558413,212825.0],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"yaxis\":{\"title\":{\"text\":\"Total Visit Weight\"},\"tickformat\":\",.2f\"},\"title\":{\"text\":\"Total Visit Weight per Venue Street\"},\"xaxis\":{\"title\":{\"text\":\"Venue Street\"}},\"legend\":{\"title\":{\"text\":\"Venue Street\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('0457b99d-ee0b-4c1e-850c-630f3b9d1d44');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.graph_objects as go\n",
        "import numpy as np\n",
        "import locale\n",
        "\n",
        "# Set the locale for comma separators\n",
        "locale.setlocale(locale.LC_ALL, '')\n",
        "\n",
        "# Filter the data to exclude rows where total_distance is null\n",
        "filtered_data = visits_pf_all.dropna(subset=['total_distance'])\n",
        "\n",
        "# Filter the data for recurrent and one-time visitors\n",
        "recurrent_data = filtered_data[filtered_data['type_user'] == 'Recurrent']\n",
        "one_time_data = filtered_data[filtered_data['type_user'] == 'One-Time']\n",
        "\n",
        "# Group the recurrent data by day_type and calculate the sum of visit_weight\n",
        "recurrent_grouped_data = recurrent_data.groupby('day_type')['visit_weight'].sum().reset_index()\n",
        "\n",
        "# Group the one-time data by day_type and calculate the sum of visit_weight\n",
        "one_time_grouped_data = one_time_data.groupby('day_type')['visit_weight'].sum().reset_index()\n",
        "\n",
        "# Create a plot for recurrent visitors\n",
        "fig1 = go.Figure(data=[\n",
        "    go.Bar(x=recurrent_grouped_data['day_type'], y=recurrent_grouped_data['visit_weight'], name='Recurrent')\n",
        "])\n",
        "\n",
        "# Update layout for recurrent visitors\n",
        "fig1.update_layout(\n",
        "    title='Visit Weight for Recurrent Visitors',\n",
        "    xaxis_title='Day Type',\n",
        "    yaxis_title='Sum of Visit Weight',\n",
        "    yaxis_tickformat=',',\n",
        ")\n",
        "\n",
        "# Format the labels to two decimal places with comma separators\n",
        "recurrent_labels = recurrent_grouped_data['visit_weight'].apply(lambda x: f'{locale.format_string(\"%0.2f\", x, grouping=True)}')\n",
        "\n",
        "# Add labels to the bars in the plot\n",
        "fig1.update_traces(text=recurrent_labels, textposition='auto')\n",
        "\n",
        "# Create a plot for one-time visitors\n",
        "fig2 = go.Figure(data=[\n",
        "    go.Bar(x=one_time_grouped_data['day_type'], y=one_time_grouped_data['visit_weight'], name='One-Time')\n",
        "])\n",
        "\n",
        "# Update layout for one-time visitors\n",
        "fig2.update_layout(\n",
        "    title='Visit Weight for One-Time Visitors',\n",
        "    xaxis_title='Day Type',\n",
        "    yaxis_title='Sum of Visit Weight',\n",
        "    yaxis_tickformat=',',\n",
        ")\n",
        "\n",
        "# Format the labels to two decimal places with comma separators\n",
        "one_time_labels = one_time_grouped_data['visit_weight'].apply(lambda x: f'{locale.format_string(\"%0.2f\", x, grouping=True)}')\n",
        "\n",
        "# Add labels to the bars in the plot\n",
        "fig2.update_traces(text=one_time_labels, textposition='auto')\n",
        "\n",
        "# Show the figures\n",
        "fig1.show()\n",
        "fig2.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ket5mCfGGrZa",
        "outputId": "76b8ac07-26b6-473e-c495-cae59cd32232"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.18.2.min.js\"></script>                <div id=\"a507e271-21f2-4d62-acec-20862e15354f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a507e271-21f2-4d62-acec-20862e15354f\")) {                    Plotly.newPlot(                        \"a507e271-21f2-4d62-acec-20862e15354f\",                        [{\"name\":\"Recurrent\",\"x\":[\"Weekday\",\"Weekend\"],\"y\":[456422.119148276,95608.61618156238],\"type\":\"bar\",\"text\":[\"456,422.12\",\"95,608.62\"],\"textposition\":\"auto\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"yaxis\":{\"title\":{\"text\":\"Sum of Visit Weight\"},\"tickformat\":\",\"},\"title\":{\"text\":\"Visit Weight for Recurrent Visitors\"},\"xaxis\":{\"title\":{\"text\":\"Day Type\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('a507e271-21f2-4d62-acec-20862e15354f');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.18.2.min.js\"></script>                <div id=\"ac1596b5-3d78-46db-afc3-0f6b9d054e74\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ac1596b5-3d78-46db-afc3-0f6b9d054e74\")) {                    Plotly.newPlot(                        \"ac1596b5-3d78-46db-afc3-0f6b9d054e74\",                        [{\"name\":\"One-Time\",\"x\":[\"Weekday\",\"Weekend\"],\"y\":[35976.7102933687,12252.058296533482],\"type\":\"bar\",\"text\":[\"35,976.71\",\"12,252.06\"],\"textposition\":\"auto\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"yaxis\":{\"title\":{\"text\":\"Sum of Visit Weight\"},\"tickformat\":\",\"},\"title\":{\"text\":\"Visit Weight for One-Time Visitors\"},\"xaxis\":{\"title\":{\"text\":\"Day Type\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('ac1596b5-3d78-46db-afc3-0f6b9d054e74');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Define the colors for the bars\n",
        "colors = ['#41459F', '#FFB524', '#FD5800', '#A3E0EB']\n",
        "\n",
        "# Filter the data for weekdays\n",
        "weekday_data = visits_pf_all[visits_pf_all['day_type'] == 'Weekday']\n",
        "\n",
        "# Filter the recurrent and one-time data for weekdays\n",
        "recurrent_weekday_data = weekday_data[weekday_data['type_user'] == 'Recurrent']\n",
        "one_time_weekday_data = weekday_data[weekday_data['type_user'] == 'One-Time']\n",
        "\n",
        "# Group the recurrent data by time_of_day_basic, venue_street, and calculate the sum of visit_weight\n",
        "recurrent_grouped_data = recurrent_weekday_data.groupby(['time_of_day_basic', 'venue_street'])['visit_weight'].sum().reset_index()\n",
        "\n",
        "# Group the one-time data by time_of_day_basic, venue_street, and calculate the sum of visit_weight\n",
        "one_time_grouped_data = one_time_weekday_data.groupby(['time_of_day_basic', 'venue_street'])['visit_weight'].sum().reset_index()\n",
        "\n",
        "# Create the stacked bar chart for recurrent visitors\n",
        "fig1 = go.Figure()\n",
        "\n",
        "for i, venue in enumerate(recurrent_grouped_data['venue_street'].unique()):\n",
        "    data = recurrent_grouped_data[recurrent_grouped_data['venue_street'] == venue]\n",
        "    fig1.add_trace(go.Bar(x=data['time_of_day_basic'], y=data['visit_weight'], name=venue, marker_color=colors[i]))\n",
        "\n",
        "fig1.update_layout(\n",
        "    title='Stacked Bar Chart for Recurrent Visitors - Weekdays',\n",
        "    xaxis_title='Time of Day',\n",
        "    yaxis_title='Sum of Visit Weight',\n",
        "    barmode='stack',\n",
        "    legend=dict(title='Venue Street'),\n",
        ")\n",
        "\n",
        "# Create the stacked bar chart for one-time visitors\n",
        "fig2 = go.Figure()\n",
        "\n",
        "for i, venue in enumerate(one_time_grouped_data['venue_street'].unique()):\n",
        "    data = one_time_grouped_data[one_time_grouped_data['venue_street'] == venue]\n",
        "    fig2.add_trace(go.Bar(x=data['time_of_day_basic'], y=data['visit_weight'], name=venue, marker_color=colors[i]))\n",
        "\n",
        "fig2.update_layout(\n",
        "    title='Stacked Bar Chart for One-Time Visitors - Weekdays',\n",
        "    xaxis_title='Time of Day',\n",
        "    yaxis_title='Sum of Visit Weight',\n",
        "    barmode='stack',\n",
        "    legend=dict(title='Venue Street'),\n",
        ")\n",
        "\n",
        "# Show the figures\n",
        "fig1.show()\n",
        "fig2.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6IbVkljTNqax",
        "outputId": "c9cff7e4-56e1-4139-e729-9c458bd6dc24"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.18.2.min.js\"></script>                <div id=\"4eeaffa4-2469-469b-aac8-eebc7b596845\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4eeaffa4-2469-469b-aac8-eebc7b596845\")) {                    Plotly.newPlot(                        \"4eeaffa4-2469-469b-aac8-eebc7b596845\",                        [{\"marker\":{\"color\":\"#41459F\"},\"name\":\"10790 Alpharetta Hwy, Roswell\",\"x\":[\"1. Early Morning\",\"2. Peak Hours Morning\",\"3. Late Morning Hours\",\"4. Office Hours\",\"5. Peak Hours Afternoon\",\"6. Early Night\",\"7. Night\"],\"y\":[9994.881377347408,12821.261958102676,5523.915018132891,24264.149673079064,26414.012371382865,17065.83981760076,1991.4492792639721],\"type\":\"bar\"},{\"marker\":{\"color\":\"#FFB524\"},\"name\":\"13071 Highway 9, Milton\",\"x\":[\"1. Early Morning\",\"2. Peak Hours Morning\",\"3. Late Morning Hours\",\"4. Office Hours\",\"5. Peak Hours Afternoon\",\"6. Early Night\",\"7. Night\"],\"y\":[5398.209618240869,19823.828036612536,10953.494703603392,16857.987460052307,24552.879958011938,10027.678096830208,4720.50342121188],\"type\":\"bar\"},{\"marker\":{\"color\":\"#FD5800\"},\"name\":\"1570 Holcomb Bridge Road, Roswell\",\"x\":[\"1. Early Morning\",\"2. Peak Hours Morning\",\"3. Late Morning Hours\",\"4. Office Hours\",\"5. Peak Hours Afternoon\",\"6. Early Night\",\"7. Night\"],\"y\":[12412.93583427203,38363.154140825536,6797.37950879352,7813.8191948684525,23070.869192239796,12237.73492395245,3408.1355638514224],\"type\":\"bar\"},{\"marker\":{\"color\":\"#A3E0EB\"},\"name\":\"299 Molly Lane, Woodstock\",\"x\":[\"1. Early Morning\",\"2. Peak Hours Morning\",\"3. Late Morning Hours\",\"4. Office Hours\",\"5. Peak Hours Afternoon\",\"6. Early Night\",\"7. Night\"],\"y\":[14302.0,22829.0,15433.0,36306.0,45226.0,18187.0,9625.0],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Stacked Bar Chart for Recurrent Visitors - Weekdays\"},\"xaxis\":{\"title\":{\"text\":\"Time of Day\"}},\"yaxis\":{\"title\":{\"text\":\"Sum of Visit Weight\"}},\"barmode\":\"stack\",\"legend\":{\"title\":{\"text\":\"Venue Street\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('4eeaffa4-2469-469b-aac8-eebc7b596845');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.18.2.min.js\"></script>                <div id=\"6d458218-acca-4d46-8c2d-6b42df57e279\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"6d458218-acca-4d46-8c2d-6b42df57e279\")) {                    Plotly.newPlot(                        \"6d458218-acca-4d46-8c2d-6b42df57e279\",                        [{\"marker\":{\"color\":\"#41459F\"},\"name\":\"10790 Alpharetta Hwy, Roswell\",\"x\":[\"1. Early Morning\",\"2. Peak Hours Morning\",\"3. Late Morning Hours\",\"4. Office Hours\",\"5. Peak Hours Afternoon\",\"6. Early Night\",\"7. Night\"],\"y\":[156.87566454168245,180.96389794460717,498.8685014796391,1167.4233210203752,1309.8250138171218,555.6045537988522,76.09118182135511],\"type\":\"bar\"},{\"marker\":{\"color\":\"#FFB524\"},\"name\":\"13071 Highway 9, Milton\",\"x\":[\"1. Early Morning\",\"2. Peak Hours Morning\",\"3. Late Morning Hours\",\"4. Office Hours\",\"5. Peak Hours Afternoon\",\"6. Early Night\",\"7. Night\"],\"y\":[53.711750553990036,201.28473777680676,220.21562286884944,1493.6822999016372,1116.4780301668904,866.2498861495884,120.6956855269643],\"type\":\"bar\"},{\"marker\":{\"color\":\"#FD5800\"},\"name\":\"1570 Holcomb Bridge Road, Roswell\",\"x\":[\"1. Early Morning\",\"2. Peak Hours Morning\",\"3. Late Morning Hours\",\"4. Office Hours\",\"5. Peak Hours Afternoon\",\"6. Early Night\",\"7. Night\"],\"y\":[91.48857890209209,549.7857693514653,969.2605147197199,3584.749422678228,8154.187271523846,6857.110521382287,374.15806744270134],\"type\":\"bar\"},{\"marker\":{\"color\":\"#A3E0EB\"},\"name\":\"299 Molly Lane, Woodstock\",\"x\":[\"1. Early Morning\",\"2. Peak Hours Morning\",\"3. Late Morning Hours\",\"4. Office Hours\",\"5. Peak Hours Afternoon\",\"6. Early Night\",\"7. Night\"],\"y\":[263.0,361.0,628.0,1817.0,2242.0,1458.0,609.0],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Stacked Bar Chart for One-Time Visitors - Weekdays\"},\"xaxis\":{\"title\":{\"text\":\"Time of Day\"}},\"yaxis\":{\"title\":{\"text\":\"Sum of Visit Weight\"}},\"barmode\":\"stack\",\"legend\":{\"title\":{\"text\":\"Venue Street\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('6d458218-acca-4d46-8c2d-6b42df57e279');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Venue Performance by Quartile"
      ],
      "metadata": {
        "id": "iMmKEd9r0wv2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def analyze_distance(df):\n",
        "    # Filter dataframe for peak morning, weekday, and recurrent users\n",
        "    visits_pf_all = df[(df['time_of_day_basic'] == '2. Peak Hours Morning') & (df['day_type'] == 'Weekday') & (df['type_user'] == 'Recurrent')].copy()\n",
        "\n",
        "    # Compute quartiles for total_distance_weekday_time\n",
        "    visits_pf_all['total_distance_weekday_time_quartiles'] = pd.qcut(visits_pf_all['total_distance_weekday_time'], q=4)\n",
        "\n",
        "    # Group by venue_street, time_of_day_basic, and total_distance_weekday_time_quartiles\n",
        "    grouped_df = visits_pf_all.groupby(['venue_street', 'time_of_day_basic', 'total_distance_weekday_time_quartiles'])\n",
        "\n",
        "    # Compute sum of visit_weight, mean of total_distance_weekday_time, mean of home_to_gym_distance, mean of work_to_gym_distance, and count of unique device_id\n",
        "    result = grouped_df.agg({\n",
        "        'visit_weight': 'sum', \n",
        "        'total_distance_weekday_time': 'mean', \n",
        "        'home_to_gym_distance': 'mean', \n",
        "        'work_to_gym_distance': 'mean',\n",
        "        'device_id': pd.Series.nunique\n",
        "    })\n",
        "\n",
        "    # Reset the index for a clean look\n",
        "    result.reset_index(inplace=True)\n",
        "\n",
        "    # Rename time_of_day_basic for better readability\n",
        "    result['time_of_day_basic'] = result['time_of_day_basic'].replace({\n",
        "        '2. Peak Hours Morning': 'Peak Hours Morning'\n",
        "    })\n",
        "\n",
        "    # Compute the total sum of visit_weight for each venue\n",
        "    total_visit_weight = result.groupby('venue_street')['visit_weight'].sum()\n",
        "\n",
        "    # Print the result along with the total sum of visit_weight\n",
        "    print(\"Results:\")\n",
        "    print(result.to_string(index=False))\n",
        "    print(\"\\nTotal Visit Weight for Each Venue:\")\n",
        "    print(total_visit_weight.to_frame().to_string())\n",
        "\n",
        "    # Save result to csv\n",
        "    result.to_csv('all_pf_summary.csv', index=False)\n",
        "\n",
        "# Analyze total distance_weekday_time for peak morning, weekday, and recurrent users\n",
        "analyze_distance(visits_pf_all)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6sZwG9F80ycs",
        "outputId": "aea8c630-7933-44b6-8666-7af04b75c9d1"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Results:\n",
            "                     venue_street  time_of_day_basic total_distance_weekday_time_quartiles  visit_weight  total_distance_weekday_time  home_to_gym_distance  work_to_gym_distance  device_id\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning           (1.0810000000000002, 6.577]   3711.526186                     3.758848              1.431817              2.327031         20\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                       (6.577, 13.356]   1118.689268                     9.359008              5.452812              3.906196         13\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (13.356, 20.955]   7635.675061                    17.044905              4.033890             13.011014         24\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (20.955, 76.075]    355.371444                    31.636330             15.820969             15.815361          9\n",
            "          13071 Highway 9, Milton Peak Hours Morning           (1.0810000000000002, 6.577]   9603.865521                     3.625200              1.722793              1.902407         38\n",
            "          13071 Highway 9, Milton Peak Hours Morning                       (6.577, 13.356]   4602.708212                    11.239790              1.964305              9.275485         24\n",
            "          13071 Highway 9, Milton Peak Hours Morning                      (13.356, 20.955]   3946.409872                    15.573179              4.602935             10.970243         18\n",
            "          13071 Highway 9, Milton Peak Hours Morning                      (20.955, 76.075]   1670.844432                    25.396234             12.761478             12.634756         14\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning           (1.0810000000000002, 6.577]   4607.403292                     3.987622              1.363469              2.624153         24\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                       (6.577, 13.356]   4093.307775                    10.834258              6.026111              4.808148         26\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (13.356, 20.955]   8789.476226                    18.091389             14.776102              3.315286         24\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (20.955, 76.075]  20872.966849                    28.315345             13.880563             14.434782         23\n",
            "        299 Molly Lane, Woodstock Peak Hours Morning           (1.0810000000000002, 6.577]   5853.000000                     3.907577              2.186341              1.721236         30\n",
            "        299 Molly Lane, Woodstock Peak Hours Morning                       (6.577, 13.356]   9119.000000                    10.256968              5.068181              5.188786         44\n",
            "        299 Molly Lane, Woodstock Peak Hours Morning                      (13.356, 20.955]   4092.000000                    15.979126              6.064365              9.914760         36\n",
            "        299 Molly Lane, Woodstock Peak Hours Morning                      (20.955, 76.075]   3765.000000                    28.371032              9.033544             19.337488         41\n",
            "\n",
            "Total Visit Weight for Each Venue:\n",
            "                                   visit_weight\n",
            "venue_street                                   \n",
            "10790 Alpharetta Hwy, Roswell      12821.261958\n",
            "13071 Highway 9, Milton            19823.828037\n",
            "1570 Holcomb Bridge Road, Roswell  38363.154141\n",
            "299 Molly Lane, Woodstock          22829.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def analyze_distance(df):\n",
        "    # Filter dataframe for peak morning, weekday, and recurrent users\n",
        "    visits_pf_all = df[(df['time_of_day_basic'] == '2. Peak Hours Morning') & \n",
        "                       (df['day_type'] == 'Weekday') & \n",
        "                       (df['type_user'] == 'Recurrent')].copy()\n",
        "\n",
        "    # Compute quartiles for total_distance_weekday_time\n",
        "    visits_pf_all['total_distance_weekday_time_quartiles'] = pd.qcut(visits_pf_all['total_distance_weekday_time'], q=4)\n",
        "\n",
        "    # Group by venue_street, time_of_day_basic, and total_distance_weekday_time_quartiles\n",
        "    grouped_df = visits_pf_all.groupby(['venue_street', 'time_of_day_basic', 'total_distance_weekday_time_quartiles'])\n",
        "\n",
        "    # Compute sum of visit_weight, mean of total_distance_weekday_time, mean of home_to_gym_distance, mean of work_to_gym_distance, and count of unique device_id\n",
        "    result = grouped_df.agg({\n",
        "        'visit_weight': 'sum', \n",
        "        'total_distance_weekday_time': 'mean', \n",
        "        'home_to_gym_distance': 'mean', \n",
        "        'work_to_gym_distance': 'mean',\n",
        "        'device_id': pd.Series.nunique\n",
        "    })\n",
        "\n",
        "    # Reset the index for a clean look\n",
        "    result.reset_index(inplace=True)\n",
        "\n",
        "    # Rename time_of_day_basic for better readability\n",
        "    result['time_of_day_basic'] = result['time_of_day_basic'].replace({\n",
        "        '2. Peak Hours Morning': 'Peak Hours Morning'\n",
        "    })\n",
        "\n",
        "    # Compute the total sum of visit_weight for each venue\n",
        "    total_visit_weight = result.groupby('venue_street')['visit_weight'].sum()\n",
        "\n",
        "    return result, total_visit_weight\n",
        "\n",
        "result, total_visit_weight = analyze_distance(visits_pf_all)\n",
        "\n",
        "# Print the result along with the total sum of visit_weight\n",
        "print(\"Results:\")\n",
        "print(result.to_string(index=False))\n",
        "print(\"\\nTotal Visit Weight for Each Venue:\")\n",
        "print(total_visit_weight.to_frame().to_string())\n",
        "\n",
        "# Save result to csv\n",
        "result.to_csv('all_pf_summary.csv', index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TdcnttRHBu65",
        "outputId": "196982c5-ee01-4a7e-9f9d-1fc7b84b7d13"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Results:\n",
            "                     venue_street  time_of_day_basic total_distance_weekday_time_quartiles  visit_weight  total_distance_weekday_time  home_to_gym_distance  work_to_gym_distance  device_id\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning           (1.0810000000000002, 6.577]   3711.526186                     3.758848              1.431817              2.327031         20\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                       (6.577, 13.356]   1118.689268                     9.359008              5.452812              3.906196         13\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (13.356, 20.955]   7635.675061                    17.044905              4.033890             13.011014         24\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (20.955, 76.075]    355.371444                    31.636330             15.820969             15.815361          9\n",
            "          13071 Highway 9, Milton Peak Hours Morning           (1.0810000000000002, 6.577]   9603.865521                     3.625200              1.722793              1.902407         38\n",
            "          13071 Highway 9, Milton Peak Hours Morning                       (6.577, 13.356]   4602.708212                    11.239790              1.964305              9.275485         24\n",
            "          13071 Highway 9, Milton Peak Hours Morning                      (13.356, 20.955]   3946.409872                    15.573179              4.602935             10.970243         18\n",
            "          13071 Highway 9, Milton Peak Hours Morning                      (20.955, 76.075]   1670.844432                    25.396234             12.761478             12.634756         14\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning           (1.0810000000000002, 6.577]   4607.403292                     3.987622              1.363469              2.624153         24\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                       (6.577, 13.356]   4093.307775                    10.834258              6.026111              4.808148         26\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (13.356, 20.955]   8789.476226                    18.091389             14.776102              3.315286         24\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (20.955, 76.075]  20872.966849                    28.315345             13.880563             14.434782         23\n",
            "        299 Molly Lane, Woodstock Peak Hours Morning           (1.0810000000000002, 6.577]   5853.000000                     3.907577              2.186341              1.721236         30\n",
            "        299 Molly Lane, Woodstock Peak Hours Morning                       (6.577, 13.356]   9119.000000                    10.256968              5.068181              5.188786         44\n",
            "        299 Molly Lane, Woodstock Peak Hours Morning                      (13.356, 20.955]   4092.000000                    15.979126              6.064365              9.914760         36\n",
            "        299 Molly Lane, Woodstock Peak Hours Morning                      (20.955, 76.075]   3765.000000                    28.371032              9.033544             19.337488         41\n",
            "\n",
            "Total Visit Weight for Each Venue:\n",
            "                                   visit_weight\n",
            "venue_street                                   \n",
            "10790 Alpharetta Hwy, Roswell      12821.261958\n",
            "13071 Highway 9, Milton            19823.828037\n",
            "1570 Holcomb Bridge Road, Roswell  38363.154141\n",
            "299 Molly Lane, Woodstock          22829.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Quartile-based Venue Performance Comparison: Alpharetta vs. Holcomb GEOIDs"
      ],
      "metadata": {
        "id": "D4542pUF6UnH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "def analyze_distance(df):\n",
        "    # Filter dataframe for peak morning and weekday, and non-null geoid_user_home and geoid_user_work\n",
        "    visits_pf_all = df[(df['time_of_day_basic'] == '2. Peak Hours Morning') & \n",
        "                       (df['day_type'] == 'Weekday') & \n",
        "                       (df['type_user'] == 'Recurrent') &\n",
        "                       (df['venue_street'].isin(['10790 Alpharetta Hwy, Roswell', '1570 Holcomb Bridge Road, Roswell']))].copy()\n",
        "\n",
        "    # Get shared geoids across all venues for both home and work\n",
        "    ids_by_venue_home = visits_pf_all.groupby('venue_street')['geoid_user_home'].unique()\n",
        "    ids_by_venue_work = visits_pf_all.groupby('venue_street')['geoid_user_work'].unique()\n",
        "\n",
        "    shared_ids_home = set.intersection(*map(set, ids_by_venue_home.values))\n",
        "    shared_ids_work = set.intersection(*map(set, ids_by_venue_work.values))\n",
        "\n",
        "    # Union of shared geoids for home and work\n",
        "    shared_ids = shared_ids_home.union(shared_ids_work)\n",
        "\n",
        "    # Filter dataframe for shared geoids either for home or work\n",
        "    visits_pf_all_shared = visits_pf_all[(visits_pf_all['geoid_user_home'].isin(shared_ids)) | (visits_pf_all['geoid_user_work'].isin(shared_ids))]\n",
        "\n",
        "    # Compute quartiles for total_distance_weekday_time\n",
        "    visits_pf_all_shared = visits_pf_all_shared.copy()\n",
        "    visits_pf_all_shared['total_distance_weekday_time_quartiles'] = pd.qcut(visits_pf_all_shared['total_distance_weekday_time'], q=4)\n",
        "\n",
        "    # Group by venue_street, time_of_day_basic, and total_distance_weekday_time_quartiles\n",
        "    grouped_df = visits_pf_all_shared.groupby(['venue_street', 'time_of_day_basic', 'total_distance_weekday_time_quartiles'])\n",
        "\n",
        "    # Compute sum of visit_weight, mean of total_distance_weekday_time, mean of home_to_gym_distance, and mean of work_to_gym_distance\n",
        "    result = grouped_df.agg({\n",
        "        'visit_weight': 'sum', \n",
        "        'total_distance_weekday_time': 'mean', \n",
        "        'home_to_gym_distance': 'mean', \n",
        "        'work_to_gym_distance': 'mean',\n",
        "        'device_id': pd.Series.nunique\n",
        "    })\n",
        "\n",
        "    result.reset_index(inplace=True)\n",
        "\n",
        "    # Rename time_of_day_basic for better readability\n",
        "    result['time_of_day_basic'] = result['time_of_day_basic'].replace({\n",
        "        '2. Peak Hours Morning': 'Peak Hours Morning'\n",
        "    })\n",
        "\n",
        "    # Compute the total sum of visit_weight for each venue\n",
        "    total_visit_weight = result.groupby('venue_street')['visit_weight'].sum()\n",
        "    \n",
        "    # Print the result along with the total sum of visit_weight\n",
        "    print(\"Results:\")\n",
        "    print(result.to_string(index=False))\n",
        "    print(\"\\nTotal Visit Weight for Each Venue:\")\n",
        "    print(total_visit_weight.to_frame().to_string())\n",
        "\n",
        "    # Save the result to a CSV file\n",
        "    result.to_csv('alpharreta_holcomb_shared_geoids.csv', index=False)\n",
        "\n",
        "# Analyze total distance_weekday_time for peak morning and weekday\n",
        "analyze_distance(visits_pf_all)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZTkAN6PK6Tk-",
        "outputId": "aeb25e85-7150-4c3d-b923-9a4e451e4044"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Results:\n",
            "                     venue_street  time_of_day_basic total_distance_weekday_time_quartiles  visit_weight  total_distance_weekday_time  home_to_gym_distance  work_to_gym_distance  device_id\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning          (1.0810000000000002, 11.523]   4815.729612                     5.462985              2.672230              2.790755         32\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (11.523, 17.883]   4511.638012                    16.006122              5.070698             10.935424         21\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (17.883, 21.649]   3138.522890                    18.224054              2.823672             15.400382          5\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (21.649, 48.016]    230.283387                    29.054423             13.832722             15.221700          6\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning          (1.0810000000000002, 11.523]   7058.224078                     6.613441              3.101176              3.512266         42\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (11.523, 17.883]   5570.062483                    15.362951             11.187035              4.175916         25\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (17.883, 21.649]  10727.689396                    21.132515             12.662681              8.469833         10\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (21.649, 48.016]   9824.146107                    24.383105             14.121468             10.261637         17\n",
            "\n",
            "Total Visit Weight for Each Venue:\n",
            "                                   visit_weight\n",
            "venue_street                                   \n",
            "10790 Alpharetta Hwy, Roswell      12696.173902\n",
            "1570 Holcomb Bridge Road, Roswell  33180.122064\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###########################################\n",
        "# |                                       |\n",
        "# |  Commute Driving Duration Model       |\n",
        "# |  based on Google API Distance Matrix  |\n",
        "# |                                       |\n",
        "###########################################\n",
        "\n",
        "def analyze_distance(df):\n",
        "    visits_pf_all = df[(df['time_of_day_basic'] == '2. Peak Hours Morning') & \n",
        "                       (df['day_type'] == 'Weekday') & \n",
        "                       (df['type_user'] == 'Recurrent') &\n",
        "                       (df['venue_street'].isin(['10790 Alpharetta Hwy, Roswell', '1570 Holcomb Bridge Road, Roswell']))].copy()\n",
        "\n",
        "    ids_by_venue_home = visits_pf_all.groupby('venue_street')['geoid_user_home'].unique()\n",
        "    ids_by_venue_work = visits_pf_all.groupby('venue_street')['geoid_user_work'].unique()\n",
        "\n",
        "    shared_ids_home = set.intersection(*map(set, ids_by_venue_home.values))\n",
        "    shared_ids_work = set.intersection(*map(set, ids_by_venue_work.values))\n",
        "\n",
        "    shared_ids = shared_ids_home.union(shared_ids_work)\n",
        "\n",
        "    visits_pf_all_shared = visits_pf_all[(visits_pf_all['geoid_user_home'].isin(shared_ids)) | (visits_pf_all['geoid_user_work'].isin(shared_ids))]\n",
        "\n",
        "    quartile_ranges = [(1.081, 11.523), (11.523, 17.883), (17.883, 21.649), (21.649, 48.016)]\n",
        "\n",
        "    # Create labels for the intervals\n",
        "    labels = [f'Quartile {i+1}' for i in range(len(quartile_ranges))]\n",
        "\n",
        "    # Create a new column for quartile labels based on total_distance_weekday_time\n",
        "    visits_pf_all_shared['total_distance_weekday_time_quartiles'] = pd.cut(visits_pf_all_shared['total_distance_weekday_time'], bins=[x[0] for x in quartile_ranges] + [quartile_ranges[-1][1]], labels=labels, include_lowest=True)\n",
        "\n",
        "    grouped_df = visits_pf_all_shared.groupby(['venue_street', 'time_of_day_basic', 'total_distance_weekday_time_quartiles'])\n",
        "\n",
        "    result = grouped_df.agg({\n",
        "        'visit_weight': 'sum', \n",
        "        'total_distance_weekday_time': 'mean', \n",
        "        'home_to_gym_distance': 'mean', \n",
        "        'work_to_gym_distance': 'mean',\n",
        "        'total_duration_drive': 'mean'\n",
        "    })\n",
        "\n",
        "    result.reset_index(inplace=True)\n",
        "\n",
        "    result['time_of_day_basic'] = result['time_of_day_basic'].replace({\n",
        "        '2. Peak Hours Morning': 'Peak Hours Morning'\n",
        "    })\n",
        "\n",
        "    total_visit_weight = result.groupby('venue_street')['visit_weight'].sum()\n",
        "\n",
        "    print(\"Results:\")\n",
        "    print(result.to_string(index=False))\n",
        "    print(\"\\nTotal Visit Weight for Each Venue:\")\n",
        "    print(total_visit_weight.to_frame().to_string())\n",
        "\n",
        "analyze_distance(visits_pf_peak_morning_sample)\n"
      ],
      "metadata": {
        "id": "cRpdhy50-rkx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "504051be-c35c-4dde-bcac-8b963cc74422"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Results:\n",
            "                     venue_street  time_of_day_basic total_distance_weekday_time_quartiles  visit_weight  total_distance_weekday_time  home_to_gym_distance  work_to_gym_distance  total_duration_drive\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                            Quartile 1   3848.117661                     5.438681              2.617064              2.821617             13.937865\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                            Quartile 2   3627.553024                    15.958525              5.014997             10.943529             27.343750\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                            Quartile 3   2578.951682                    18.198022              2.684953             15.513068             28.816151\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                            Quartile 4    222.003341                    28.741425             14.059320             14.682105             46.446970\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                            Quartile 1   5521.867737                     6.454933              3.097278              3.357655             16.289489\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                            Quartile 2   4534.361326                    15.331257             11.182657              4.148601             29.174135\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                            Quartile 3   8542.347412                    21.124410             12.767272              8.357139             36.663077\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                            Quartile 4   7691.282811                    24.336293             13.914918             10.421374             41.124215\n",
            "\n",
            "Total Visit Weight for Each Venue:\n",
            "                                   visit_weight\n",
            "venue_street                                   \n",
            "10790 Alpharetta Hwy, Roswell      10276.625708\n",
            "1570 Holcomb Bridge Road, Roswell  26289.859287\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-96-aac5cf6f7a3a>:23: SettingWithCopyWarning:\n",
            "\n",
            "\n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def process_df(df, tag):\n",
        "    df = df.copy()  # Make a copy of the dataframe before modifying it\n",
        "    df['total_distance_weekday_time_quartiles'] = pd.qcut(df['total_distance_weekday_time'], q=4)\n",
        "    grouped_df = df.groupby(['venue_street', 'time_of_day_basic', 'total_distance_weekday_time_quartiles'])\n",
        "    result = grouped_df.agg({\n",
        "        'visit_weight': 'sum', \n",
        "        'total_distance_weekday_time': 'mean', \n",
        "        'home_to_gym_distance': 'mean', \n",
        "        'work_to_gym_distance': 'mean',\n",
        "        'device_id': pd.Series.nunique\n",
        "    })\n",
        "    result.reset_index(inplace=True)\n",
        "    result['time_of_day_basic'] = result['time_of_day_basic'].replace({\n",
        "        '2. Peak Hours Morning': 'Peak Hours Morning'\n",
        "    })\n",
        "    total_visit_weight = result.groupby('venue_street')['visit_weight'].sum()\n",
        "\n",
        "    return result, total_visit_weight\n",
        "\n",
        "\n",
        "def analyze_distance_home(df):\n",
        "    visits_pf_all = df[(df['time_of_day_basic'] == '2. Peak Hours Morning') & \n",
        "                       (df['day_type'] == 'Weekday') & \n",
        "                       (df['type_user'] == 'Recurrent') &\n",
        "                       (df['venue_street'].isin(['10790 Alpharetta Hwy, Roswell', '1570 Holcomb Bridge Road, Roswell']))].copy()\n",
        "    ids_by_venue_home = visits_pf_all.groupby('venue_street')['geoid_user_home'].unique()\n",
        "    shared_ids_home = set.intersection(*map(set, ids_by_venue_home.values))\n",
        "    visits_pf_all_shared = visits_pf_all[visits_pf_all['geoid_user_home'].isin(shared_ids_home)].copy()  # Make a copy of the dataframe before returning it\n",
        "    return process_df(visits_pf_all_shared, 'Home')\n",
        "\n",
        "\n",
        "def analyze_distance_work(df):\n",
        "    visits_pf_all = df[(df['time_of_day_basic'] == '2. Peak Hours Morning') & \n",
        "                       (df['day_type'] == 'Weekday') & \n",
        "                       (df['type_user'] == 'Recurrent') &\n",
        "                       (df['venue_street'].isin(['10790 Alpharetta Hwy, Roswell', '1570 Holcomb Bridge Road, Roswell']))].copy()\n",
        "    ids_by_venue_work = visits_pf_all.groupby('venue_street')['geoid_user_work'].unique()\n",
        "    shared_ids_work = set.intersection(*map(set, ids_by_venue_work.values))\n",
        "    visits_pf_all_shared = visits_pf_all[visits_pf_all['geoid_user_work'].isin(shared_ids_work)].copy()  # Make a copy of the dataframe before returning it\n",
        "    return process_df(visits_pf_all_shared, 'Work')\n",
        "\n",
        "\n",
        "# Analyze total distance_weekday_time for peak morning, weekday, and recurrent users\n",
        "result_home, total_visit_weight_home = analyze_distance_home(visits_pf_all)\n",
        "result_work, total_visit_weight_work = analyze_distance_work(visits_pf_all)\n",
        "\n",
        "# Concatenate the two result dataframes\n",
        "result = pd.concat([result_home, result_work], ignore_index=True)\n",
        "\n",
        "# Print results and total visit weights\n",
        "print(\"Results:\")\n",
        "print(result.to_string(index=False))\n",
        "\n",
        "total_visit_weight = total_visit_weight_home.append(total_visit_weight_work)\n",
        "print(\"\\nTotal Visit Weight for Each Venue:\")\n",
        "print(total_visit_weight.to_frame().to_string())\n",
        "\n",
        "# Save result to csv\n",
        "result.to_csv('shared_ids.csv', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5aalUTQ_J_T3",
        "outputId": "7cea7dee-d28a-4ef4-bd38-fc9895a7b474"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Results:\n",
            "                     venue_street  time_of_day_basic total_distance_weekday_time_quartiles  visit_weight  total_distance_weekday_time  home_to_gym_distance  work_to_gym_distance  device_id\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning           (1.0810000000000002, 6.435]   3711.526186                     3.758848              1.431817              2.327031         20\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                       (6.435, 14.156]   1454.647541                    11.238463              3.419398              7.819065         18\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (14.156, 17.849]   2126.239395                    16.228020              2.946216             13.281804          9\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (17.849, 48.016]   3370.786501                    18.970357              2.638876             16.331481          7\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning           (1.0810000000000002, 6.435]   4419.080374                     3.885774              1.351654              2.534120         23\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                       (6.435, 14.156]   4319.633219                    11.080210              5.714606              5.365603         27\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (14.156, 17.849]   3197.686433                    17.055552             14.425919              2.629633          7\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (17.849, 48.016]   2375.244565                    25.997342             18.649308              7.348035          6\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning            (1.0810000000000002, 7.68]   3899.836912                     4.050852              1.549666              2.501186         24\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                        (7.68, 17.435]   3238.366892                    13.570178              8.028134              5.542043         25\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (17.435, 21.003]    290.431404                    20.006623             14.618608              5.388015          4\n",
            "    10790 Alpharetta Hwy, Roswell Peak Hours Morning                      (21.003, 41.234]    148.646233                    26.375578             16.967277              9.408301          3\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning            (1.0810000000000002, 7.68]   4657.953239                     4.035347              1.366681              2.668666         25\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                        (7.68, 17.435]   2993.678085                    11.650261              8.096281              3.553979         28\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (17.435, 21.003]   8251.123700                    19.267378             17.839719              1.427659         10\n",
            "1570 Holcomb Bridge Road, Roswell Peak Hours Morning                      (21.003, 41.234]   6349.870068                    25.405855             22.598563              2.807292         14\n",
            "\n",
            "Total Visit Weight for Each Venue:\n",
            "                                   visit_weight\n",
            "venue_street                                   \n",
            "10790 Alpharetta Hwy, Roswell      10663.199623\n",
            "1570 Holcomb Bridge Road, Roswell  14311.644592\n",
            "10790 Alpharetta Hwy, Roswell       7577.281441\n",
            "1570 Holcomb Bridge Road, Roswell  22252.625092\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-106-8bb184a938e5>:54: FutureWarning:\n",
            "\n",
            "The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def analyze_distance_work(df):\n",
        "    visits_pf_all = df[(df['time_of_day_basic'] == '2. Peak Hours Morning') & \n",
        "                       (df['day_type'] == 'Weekday') & \n",
        "                       (df['type_user'] == 'Recurrent') &\n",
        "                       (df['venue_street'].isin(['10790 Alpharetta Hwy, Roswell', '1570 Holcomb Bridge Road, Roswell']))].copy()\n",
        "\n",
        "    ids_by_venue_work = visits_pf_all.groupby('venue_street')['geoid_user_work'].unique()\n",
        "    shared_ids_work = set.intersection(*map(set, ids_by_venue_work.values))\n",
        "\n",
        "    visits_pf_all_shared = visits_pf_all[visits_pf_all['geoid_user_work'].isin(shared_ids_work)].copy()  # Make a copy to avoid SettingWithCopyWarning\n",
        "\n",
        "    visits_pf_all_shared['total_distance_weekday_time_quartiles'] = pd.qcut(visits_pf_all_shared['total_distance_weekday_time'], q=4, labels=False)\n",
        "\n",
        "    visits_pf_all_shared.to_csv('visits_pf_all_shared_work.csv', index=False)\n",
        "\n",
        "    return visits_pf_all_shared\n",
        "\n",
        "visits_pf_all_shared_work = analyze_distance_work(visits_pf_all)\n"
      ],
      "metadata": {
        "id": "MsGuD5DyTBU9"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Zip Code Analysis"
      ],
      "metadata": {
        "id": "ElMfmqzOndbh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/visits_pf_all_shared_work.csv')\n",
        "\n",
        "# Filter rows where total_distance_weekday_time_quartiles is 'Quartile 3' or 'Quartile 4'\n",
        "df = df[df['total_distance_weekday_time_quartiles'].isin([2, 3])]\n",
        "\n",
        "# Create a new column for the total population sum\n",
        "df['total_population'] = df['total_population_15_19'] + df['total_population_20_34'] + df['total_population_35_54']\n",
        "\n",
        "# Create a dictionary mapping each geoid to its population\n",
        "geoid_to_population = df[['geoid_user_home', 'total_population']].drop_duplicates().set_index('geoid_user_home')['total_population'].to_dict()\n",
        "\n",
        "# Create a dataframe that holds each unique geoid and zip code pair\n",
        "unique_geoid_zip_pairs = df[['venue_street', 'geoid_user_home']].drop_duplicates()\n",
        "\n",
        "# Map each geoid to its population in the dataframe\n",
        "unique_geoid_zip_pairs['total_population'] = unique_geoid_zip_pairs['geoid_user_home'].map(geoid_to_population)\n",
        "\n",
        "# Now group by venue_street, compute the sum and median of total_population and count unique geoid_user_home\n",
        "result = unique_geoid_zip_pairs.groupby('venue_street').agg({'total_population': ['sum', 'median'], 'geoid_user_home': 'count'})\n",
        "\n",
        "# Reset the index for a clean look\n",
        "result.reset_index(inplace=True)\n",
        "\n",
        "# Flatten the column names\n",
        "result.columns = ['_'.join(col).rstrip('_') for col in result.columns.values]\n",
        "\n",
        "# Rename columns for better readability\n",
        "result.rename(columns={'venue_street_': 'venue_street', 'total_population_sum': 'sum_total_population', 'total_population_median': 'median_total_population', 'geoid_user_home_count': 'unique_zip_count'}, inplace=True)\n",
        "\n",
        "# Print the result\n",
        "print(result)\n",
        "\n",
        "# Export the result to a CSV file\n",
        "result.to_csv('result_total.csv', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5qQX1_TNppFY",
        "outputId": "86e5bdc2-c8c5-4d97-eaca-d71d03e88e16"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                        venue_street  sum_total_population  \\\n",
            "0      10790 Alpharetta Hwy, Roswell              209732.0   \n",
            "1  1570 Holcomb Bridge Road, Roswell              292979.0   \n",
            "\n",
            "   median_total_population  unique_zip_count  \n",
            "0                  26615.0                 7  \n",
            "1                  22489.0                13  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load data\n",
        "df = pd.read_csv('/content/visits_pf_all_shared_work.csv')\n",
        "\n",
        "# Filter rows where total_distance_weekday_time_quartiles is 'Quartile 3' or 'Quartile 4'\n",
        "df = df[df['total_distance_weekday_time_quartiles'].isin([2, 3])]\n",
        "\n",
        "# Create a new column for the total population sum\n",
        "df['total_population'] = df['total_population_15_19'] + df['total_population_20_34'] + df['total_population_35_54']\n",
        "\n",
        "# Create a dataframe that holds each unique geoid and venue_street pair with associated population values\n",
        "unique_geoid_venue_pairs = df[['venue_street', 'geoid_user_home', 'total_population', 'total_population_15_19', 'total_population_20_34', 'total_population_35_54']].drop_duplicates()\n",
        "\n",
        "# Now group by venue_street, compute the sum and median of total_population and count unique geoid_user_home\n",
        "result = unique_geoid_venue_pairs.groupby('venue_street').agg({'total_population': ['sum', 'median'], 'geoid_user_home': 'count', 'total_population_15_19': 'sum', 'total_population_20_34': 'sum', 'total_population_35_54': 'sum'})\n",
        "\n",
        "# Reset the index for a clean look\n",
        "result.reset_index(inplace=True)\n",
        "\n",
        "# Flatten the column names\n",
        "result.columns = ['_'.join(col).rstrip('_') for col in result.columns.values]\n",
        "\n",
        "# Rename columns for better readability\n",
        "result.rename(columns={'venue_street_': 'venue_street', \n",
        "                       'total_population_sum': 'sum_total_population', \n",
        "                       'total_population_median': 'median_total_population', \n",
        "                       'geoid_user_home_count': 'unique_zip_count',\n",
        "                       'total_population_15_19_sum': 'sum_total_population_15_19',\n",
        "                       'total_population_20_34_sum': 'sum_total_population_20_34',\n",
        "                       'total_population_35_54_sum': 'sum_total_population_35_54'}, inplace=True)\n",
        "\n",
        "# Print the result\n",
        "print(result)\n",
        "\n",
        "# Export the result to a CSV file\n",
        "result.to_csv('result_total.csv', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xTthR-f1uX7F",
        "outputId": "19e065d6-c8c6-48df-a634-5a01a97d6afb"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                        venue_street  sum_total_population  \\\n",
            "0      10790 Alpharetta Hwy, Roswell              209732.0   \n",
            "1  1570 Holcomb Bridge Road, Roswell              292979.0   \n",
            "\n",
            "   median_total_population  unique_zip_count  sum_total_population_15_19  \\\n",
            "0                  26615.0                 7                     27838.0   \n",
            "1                  22489.0                13                     36957.0   \n",
            "\n",
            "   sum_total_population_20_34  sum_total_population_35_54  \n",
            "0                     73233.0                    108661.0  \n",
            "1                    102749.0                    153273.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load data\n",
        "df = pd.read_csv('/content/visits_pf_all_shared_work.csv')\n",
        "\n",
        "# Convert GEO_ID to integer for joining\n",
        "sex_age_S0101['geoid_user_home'] = pd.to_numeric(sex_age_S0101['geoid'], errors='coerce')\n",
        "\n",
        "# Rename 'GEO_ID' to 'geoid_user_home' for merging\n",
        "sex_age_S0101.rename(columns={'geoid_user_home': 'geoid_user_home'}, inplace=True)\n",
        "\n",
        "# Filter rows where total_distance_weekday_time_quartiles is 'Quartile 3' or 'Quartile 4'\n",
        "df = df[df['total_distance_weekday_time_quartiles'].isin([2, 3])]\n",
        "\n",
        "# Extract unique zip codes per venue\n",
        "unique_geoid_zip_pairs = df[['venue_street', 'geoid_user_home']].drop_duplicates()\n",
        "\n",
        "# Merge the unique zip codes with the sex_age_S0101 data\n",
        "merged_data = pd.merge(unique_geoid_zip_pairs, sex_age_S0101, on='geoid_user_home', how='left')\n",
        "\n",
        "# Compute the total population\n",
        "merged_data['total_population'] = merged_data['total_population_15_19'] + merged_data['total_population_20_34'] + merged_data['total_population_35_54']\n",
        "\n",
        "# Group by venue_street and geoid_user_home again, compute the sum of total_population\n",
        "result = merged_data.groupby(['venue_street', 'geoid_user_home']).agg({'total_population': 'sum'}).reset_index()\n",
        "\n",
        "# Add the home_id column based on geoid_user_home\n",
        "result['home_id'] = result['geoid_user_home']\n",
        "\n",
        "# Print the result\n",
        "print(result)\n",
        "\n",
        "# Export the result to a CSV file\n",
        "result.to_csv('result_by_zipcode.csv', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mCr_HrRygjoi",
        "outputId": "d9d71661-2391-49da-8168-c2da175edd71"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                         venue_street  geoid_user_home  total_population  \\\n",
            "0       10790 Alpharetta Hwy, Roswell            30008           20739.0   \n",
            "1       10790 Alpharetta Hwy, Roswell            30043           49889.0   \n",
            "2       10790 Alpharetta Hwy, Roswell            30102           24769.0   \n",
            "3       10790 Alpharetta Hwy, Roswell            30114           29325.0   \n",
            "4       10790 Alpharetta Hwy, Roswell            30115           26615.0   \n",
            "5       10790 Alpharetta Hwy, Roswell            30152           24261.0   \n",
            "6       10790 Alpharetta Hwy, Roswell            30188           34134.0   \n",
            "7   1570 Holcomb Bridge Road, Roswell            30004           37050.0   \n",
            "8   1570 Holcomb Bridge Road, Roswell            30052           40628.0   \n",
            "9   1570 Holcomb Bridge Road, Roswell            30072             370.0   \n",
            "10  1570 Holcomb Bridge Road, Roswell            30078           22256.0   \n",
            "11  1570 Holcomb Bridge Road, Roswell            30087           19188.0   \n",
            "12  1570 Holcomb Bridge Road, Roswell            30088           15832.0   \n",
            "13  1570 Holcomb Bridge Road, Roswell            30093           32904.0   \n",
            "14  1570 Holcomb Bridge Road, Roswell            30102           24769.0   \n",
            "15  1570 Holcomb Bridge Road, Roswell            30114           29325.0   \n",
            "16  1570 Holcomb Bridge Road, Roswell            30122           15295.0   \n",
            "17  1570 Holcomb Bridge Road, Roswell            30157           27572.0   \n",
            "18  1570 Holcomb Bridge Road, Roswell            30189           22489.0   \n",
            "19  1570 Holcomb Bridge Road, Roswell            30288            5301.0   \n",
            "\n",
            "    home_id  \n",
            "0     30008  \n",
            "1     30043  \n",
            "2     30102  \n",
            "3     30114  \n",
            "4     30115  \n",
            "5     30152  \n",
            "6     30188  \n",
            "7     30004  \n",
            "8     30052  \n",
            "9     30072  \n",
            "10    30078  \n",
            "11    30087  \n",
            "12    30088  \n",
            "13    30093  \n",
            "14    30102  \n",
            "15    30114  \n",
            "16    30122  \n",
            "17    30157  \n",
            "18    30189  \n",
            "19    30288  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Customer Acquisition"
      ],
      "metadata": {
        "id": "RCNbncxLbluw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Sort the dataframe by device_id and visit_start_time to ensure the first appearance of each device_id is its earliest visit\n",
        "visits_pf_all.sort_values(['device_id', 'visit_start_time'], inplace=True)\n",
        "\n",
        "# Use groupby-cumcount to label each row with its rank within the group defined by 'device_id'\n",
        "# A device is new if it's the first time the device_id appears in the DataFrame\n",
        "visits_pf_all['is_new_device'] = visits_pf_all.groupby('device_id').cumcount() == 0\n",
        "\n",
        "# Count the number of new devices per month, venue and time_of_day_basic, and whether they are recurrent or one-time\n",
        "new_device_counts = visits_pf_all[visits_pf_all['is_new_device']].groupby(['year_month', 'venue_street', 'time_of_day_basic', 'type_user'])['device_id'].nunique().reset_index()\n",
        "\n",
        "# Save to CSV\n",
        "new_device_counts.to_csv('new_device_counts.csv', index=False)\n",
        "\n",
        "# Display the table\n",
        "print(new_device_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UJ-cl9ObwfJ",
        "outputId": "3ba42c77-5d8e-40d0-e50e-be16ecbdeb78"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    year_month                   venue_street        time_of_day_basic  \\\n",
            "0      2018-02  10790 Alpharetta Hwy, Roswell         1. Early Morning   \n",
            "1      2018-02  10790 Alpharetta Hwy, Roswell         1. Early Morning   \n",
            "2      2018-02  10790 Alpharetta Hwy, Roswell    2. Peak Hours Morning   \n",
            "3      2018-02  10790 Alpharetta Hwy, Roswell    2. Peak Hours Morning   \n",
            "4      2018-02  10790 Alpharetta Hwy, Roswell    3. Late Morning Hours   \n",
            "..         ...                            ...                      ...   \n",
            "562    2019-01      299 Molly Lane, Woodstock  5. Peak Hours Afternoon   \n",
            "563    2019-01      299 Molly Lane, Woodstock           6. Early Night   \n",
            "564    2019-01      299 Molly Lane, Woodstock           6. Early Night   \n",
            "565    2019-01      299 Molly Lane, Woodstock                 7. Night   \n",
            "566    2019-01      299 Molly Lane, Woodstock                 7. Night   \n",
            "\n",
            "     type_user  device_id  \n",
            "0     One-Time          2  \n",
            "1    Recurrent          4  \n",
            "2     One-Time          1  \n",
            "3    Recurrent          6  \n",
            "4     One-Time          4  \n",
            "..         ...        ...  \n",
            "562  Recurrent         16  \n",
            "563   One-Time          6  \n",
            "564  Recurrent          6  \n",
            "565   One-Time          5  \n",
            "566  Recurrent          7  \n",
            "\n",
            "[567 rows x 5 columns]\n"
          ]
        }
      ]
    }
  ]
}